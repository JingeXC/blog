{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/favicon.png","path":"favicon.png","modified":0,"renderable":0},{"_id":"themes/yilia/source/main.04d600.css","path":"main.04d600.css","modified":0,"renderable":1},{"_id":"themes/yilia/source/slider.885efe.js","path":"slider.885efe.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/mobile.d238ee.js","path":"mobile.d238ee.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/main.04d600.js","path":"main.04d600.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","path":"fonts/default-skin.b257fa.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","path":"fonts/tooltip.4004ff.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.59e68b.eot","path":"fonts/iconfont.59e68b.eot","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/default-skin.png","path":"img/default-skin.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.b7ae25.ttf","path":"fonts/iconfont.b7ae25.ttf","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.ca3627.woff","path":"fonts/iconfont.ca3627.woff","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/preloader.gif","path":"img/preloader.gif","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.dba24b.svg","path":"fonts/iconfont.dba24b.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":0,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"67dac453e7a2a6a42bed94e9aa1f1a4097fbfefe","modified":1482937003065},{"_id":"themes/yilia/.babelrc","hash":"db600d40e93e6d8023737a65d58d3be7370e5e30","modified":1484453288067},{"_id":"source/new 1.html","hash":"d6f586b00d4cec6635b29d415e3aeeca7b5a711d","modified":1486646498696},{"_id":"source/favicon.png","hash":"39a38b3f98ee78738759ae9b1f5f47c365bec035","modified":1482679842399},{"_id":"themes/yilia/.eslintrc.js","hash":"303d25adf02ad65720e537a16a4a137d14bb755f","modified":1484453288069},{"_id":"themes/yilia/.editorconfig","hash":"daaa8757fac18f8735fadd0a37a42c06f421ca14","modified":1484453288067},{"_id":"themes/yilia/.eslintignore","hash":"ed9d8911ca08c3dd5072c48dd0be4d06f8897730","modified":1484453288069},{"_id":"themes/yilia/.gitignore","hash":"d5fc575329853ff620b50fc62ad4b18fa09a308a","modified":1484453288070},{"_id":"themes/yilia/.gitattributes","hash":"758cfbecfa7919e99abddf3297f37cde7e3d8d4e","modified":1484453288070},{"_id":"themes/yilia/README.md","hash":"0becd9c18f9d44fc364788a34a4f3ec82ca7940a","modified":1484453288071},{"_id":"themes/yilia/_config.yml","hash":"6a4aa0382fb999dd50e1a1423b632beb3b4cf615","modified":1484455894852},{"_id":"themes/yilia/package.json","hash":"4631f9013f0b1c5fc5d73af4c3624375bfe4d109","modified":1484453288100},{"_id":"themes/yilia/webpack.config.js","hash":"14fe482547b12b15bc78cb981c42a4ca5b6ba770","modified":1484453288153},{"_id":"source/_posts/angularTips.md","hash":"52d8e9365dbeeddd9b5fe1dd2bee32f478cb6c8d","modified":1486559830764},{"_id":"source/_posts/box.md","hash":"818c83c420cf022b354536d105abbd1c12713574","modified":1484575200261},{"_id":"source/_posts/atom.md","hash":"5491061cdbdfae218ce680956e7461fb2f986cfb","modified":1483541448646},{"_id":"source/_posts/gulp.md","hash":"755af9a5fc276b197830baf3c8e9ce3e2fa61374","modified":1487683531061},{"_id":"source/_posts/carouselFigure.md","hash":"84982168374b71d6b524b2ff3cd41e335550188c","modified":1484573550288},{"_id":"source/_posts/googleadinionic.md","hash":"bd8be8522596fd0500a415a08dd5e34369947fcc","modified":1484456025854},{"_id":"source/_posts/ionicSlide.md","hash":"792dd5547232df4236f8e7067908294d7d7dd646","modified":1484456041994},{"_id":"source/_posts/jsclosure.md","hash":"7d6abc7f6a97a3929646f7673f41ad8195a25e33","modified":1483158527739},{"_id":"source/_posts/staticStorage.md","hash":"d569d4b07c73a93bfdd596d98c53959acce6811c","modified":1484456084457},{"_id":"source/_posts/route.md","hash":"2d1d44a666de3317f8a3201af73b8ae4f2357d23","modified":1483973346575},{"_id":"source/_posts/landingpage.md","hash":"046a1760ec9a8491579cf3d26c4dccbe225b4874","modified":1484456060772},{"_id":"source/_posts/less.md","hash":"eea7eb4b84f01d1477f8e06a93a9b2f6c2e26608","modified":1483154348191},{"_id":"themes/yilia/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1484453235591},{"_id":"themes/yilia/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1484453288042},{"_id":"themes/yilia/.git/config","hash":"316bc92d9936dc739c39161838a28fb4641cbea2","modified":1484453288056},{"_id":"themes/yilia/.git/index","hash":"e1c3d0e8534cf714e77fb9617e376ce816856f83","modified":1484453288153},{"_id":"themes/yilia/.git/packed-refs","hash":"fc79f730fc22c3a2a8b715dba7f1d0ef9bb7e281","modified":1484453288017},{"_id":"themes/yilia/languages/default.yml","hash":"f26a34a7983d4bc17c65c7f0f14da598e62ce66d","modified":1484453288073},{"_id":"themes/yilia/languages/fr.yml","hash":"b4be1c1592a72012e48df2b3ec41cc9685573e50","modified":1484453288074},{"_id":"themes/yilia/languages/nl.yml","hash":"3d82ec703d0b3287739d7cb4750a715ae83bfcb3","modified":1484453288074},{"_id":"themes/yilia/languages/no.yml","hash":"ddf2035e920a5ecb9076138c184257d9f51896a7","modified":1484453288075},{"_id":"themes/yilia/languages/ru.yml","hash":"2a476b4c6e04900914c81378941640ac5d58a1f0","modified":1484453288075},{"_id":"themes/yilia/languages/zh-CN.yml","hash":"b057f389c6713010f97d461e48ec959b0b6f3b44","modified":1484453288076},{"_id":"themes/yilia/languages/zh-tw.yml","hash":"f5f0ca88185da7a8457760d84bf221781473bd7c","modified":1484453288077},{"_id":"themes/yilia/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1484453288095},{"_id":"themes/yilia/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1484453288096},{"_id":"themes/yilia/layout/index.ejs","hash":"ec498c6c0606acde997ce195dad97b267418d980","modified":1484453288097},{"_id":"themes/yilia/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1484453288098},{"_id":"themes/yilia/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1484453288099},{"_id":"themes/yilia/layout/layout.ejs","hash":"b471ab706d48e0be3f783eab1c94bf5878ef5a94","modified":1484453288097},{"_id":"themes/yilia/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1484453288099},{"_id":"themes/yilia/source-src/css.ejs","hash":"cf7eab48d626433120d1ef9697f719a359817018","modified":1484453288101},{"_id":"themes/yilia/source-src/script.ejs","hash":"28abac2426761d7e715b38aadd86ce6549c8ae77","modified":1484453288141},{"_id":"themes/yilia/source/main.04d600.css","hash":"c309880e289ebd6060f7053cdc702f8a9f5f6976","modified":1484453288153},{"_id":"themes/yilia/source/slider.885efe.js","hash":"41a76cb10a2b344d54a15ffac68d17331fc6f3d6","modified":1484453288153},{"_id":"themes/yilia/source/mobile.d238ee.js","hash":"a054884092af1cc5c2c14e5e11a4dac6d9254481","modified":1484453288153},{"_id":"themes/yilia/source/main.04d600.js","hash":"a0359e7962038f53f9ffbd02dcc52485f8e04da8","modified":1484453288153},{"_id":"themes/yilia/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1484453235592},{"_id":"themes/yilia/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1484453235594},{"_id":"themes/yilia/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1484453235595},{"_id":"themes/yilia/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1484453235593},{"_id":"themes/yilia/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1484453235596},{"_id":"themes/yilia/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1484453235597},{"_id":"themes/yilia/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1484453235597},{"_id":"themes/yilia/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1484453235598},{"_id":"themes/yilia/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1484453235601},{"_id":"themes/yilia/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1484453235599},{"_id":"themes/yilia/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1484453235599},{"_id":"themes/yilia/.git/logs/HEAD","hash":"6f70f19051847fa998349620726e041660442022","modified":1484453288048},{"_id":"themes/yilia/layout/_partial/after-footer.ejs","hash":"61c95c49baa2c1bfd99cf88c55ba205b44bf3d97","modified":1484453288079},{"_id":"themes/yilia/layout/_partial/archive-post.ejs","hash":"edc0154b30a4127acda10297bec6aacf754b4ac4","modified":1484453288080},{"_id":"themes/yilia/layout/_partial/baidu-analytics.ejs","hash":"155327c23607f69989b58845f24d842a54e504b8","modified":1484453288082},{"_id":"themes/yilia/layout/_partial/footer.ejs","hash":"871f81cacd5d41cb2eb001cd56254217a857dc2f","modified":1484453288083},{"_id":"themes/yilia/layout/_partial/archive.ejs","hash":"a4eacc2bc1278095a0ef99f904b0634c78f980eb","modified":1484453288080},{"_id":"themes/yilia/layout/_partial/article.ejs","hash":"4767e666849ac2600c7a1cbf94c54cf702864f80","modified":1484453288081},{"_id":"themes/yilia/layout/_partial/css.ejs","hash":"bc3203cc15eb3b51a986c48a2bbc84f51ecf9b69","modified":1484453288083},{"_id":"themes/yilia/layout/_partial/google-analytics.ejs","hash":"1ccc627d7697e68fddc367c73ac09920457e5b35","modified":1484453288084},{"_id":"themes/yilia/layout/_partial/head.ejs","hash":"12ca7d8dba56bc767b9309dda9526dcbaffc1614","modified":1484453288085},{"_id":"themes/yilia/layout/_partial/left-col.ejs","hash":"e2b3f2b3631ef211a4d98d11f0da2d285340f10e","modified":1484453288086},{"_id":"themes/yilia/layout/_partial/mathjax.ejs","hash":"11550a418921d330e6553be0569a94ab5a217967","modified":1484453288087},{"_id":"themes/yilia/layout/_partial/header.ejs","hash":"b69855e07b65117769adc515cb64b803932068c9","modified":1484453288085},{"_id":"themes/yilia/layout/_partial/mobile-nav.ejs","hash":"ccec1fc70f021cb50ac85b524e7949878ab93a18","modified":1484453288087},{"_id":"themes/yilia/layout/_partial/script.ejs","hash":"f9ffe59c637e7431bcc11443464c71f458dbf568","modified":1484453288093},{"_id":"themes/yilia/layout/_partial/viewer.ejs","hash":"cc1c39903aed0a0601d104238d2bbd13ad2a36f3","modified":1484453288094},{"_id":"themes/yilia/layout/_partial/tools.ejs","hash":"538b6d35b25cbdba7dc77feec638336625c8ef8b","modified":1484453288094},{"_id":"themes/yilia/source-src/css/_core.scss","hash":"29ba600e98ed55f7af4ade8038272c84cba21188","modified":1484453288102},{"_id":"themes/yilia/source-src/css/_function.scss","hash":"ce227b6f5a9af194fd5d455200630f32c05e151f","modified":1484453288102},{"_id":"themes/yilia/source-src/css/article-inner.scss","hash":"4115c4518cca3f5cf461018aa7a7321138d017cc","modified":1484453288102},{"_id":"themes/yilia/source-src/css/archive.scss","hash":"8a0ae8ee6af8df3f215f1cd4ecc10145a5b92cf0","modified":1484453288102},{"_id":"themes/yilia/source-src/css/article-nav.scss","hash":"9069371dcc65eee63081a21e8a56a9f3dbf64c08","modified":1484453288102},{"_id":"themes/yilia/source-src/css/article.scss","hash":"55d082fec4c6bb341725567acaa29ce37d50320a","modified":1484453288102},{"_id":"themes/yilia/source-src/css/article-main.scss","hash":"1577a2336b3ad122f49f60dff2bc1a97d4e7b18b","modified":1484453288102},{"_id":"themes/yilia/source-src/css/duoshuo.scss","hash":"8eb9678e2f88da64436d75e5fde5c84bd52f7e17","modified":1484453288102},{"_id":"themes/yilia/source-src/css/footer.scss","hash":"7ca837a4cc34db1c35f01baec85eb10ccc64ea86","modified":1484453288102},{"_id":"themes/yilia/source-src/css/global.scss","hash":"b4cb4f45a55d4250cd9056f76dab2a3c0dabcec4","modified":1484453288102},{"_id":"themes/yilia/source-src/css/fonts.scss","hash":"5dc23be94451d54f0757de85747fd75061e8cf52","modified":1484453288102},{"_id":"themes/yilia/source-src/css/grid.scss","hash":"f53ea8270752b5919ec5d79224d22af91f2eda12","modified":1484453288118},{"_id":"themes/yilia/source-src/css/highlight.scss","hash":"40e5aa5056dc0b3b9f51c5b387370b612e265d4e","modified":1484453288119},{"_id":"themes/yilia/source-src/css/main.scss","hash":"b63c0f9b3bf68efc3bcd7c816bcac6f2fb827528","modified":1484453288123},{"_id":"themes/yilia/source-src/css/left.scss","hash":"1ee3dd6fa50186af5bedb09d4a0e6b47ddb1b57b","modified":1484453288122},{"_id":"themes/yilia/source-src/css/page.scss","hash":"244c4d75c375978ff9edb74acc68825e63c6b235","modified":1484453288125},{"_id":"themes/yilia/source-src/css/mobile-slider.scss","hash":"19f10fd2f0c3377aa4b165b3c2291ecf86dd9351","modified":1484453288124},{"_id":"themes/yilia/source-src/css/mobile.scss","hash":"28a01c3d85ec3194095f96988642a16d461f1077","modified":1484453288124},{"_id":"themes/yilia/source-src/css/reward.scss","hash":"a557a9ed244c82b8b71e9da9de3339d92783499f","modified":1484453288126},{"_id":"themes/yilia/source-src/css/scroll.scss","hash":"2495f7e4e3b055735c531f944b5f40a118a351ec","modified":1484453288126},{"_id":"themes/yilia/source-src/css/tags.scss","hash":"915c93edd67c5326695cc7dc84b14c5f154dbcc8","modified":1484453288129},{"_id":"themes/yilia/source-src/css/social.scss","hash":"70c2e36b7161717feed1f231271ed693c36407d1","modified":1484453288128},{"_id":"themes/yilia/source-src/css/share.scss","hash":"9d6f6884f40c191882e56a1e1e1192400944a515","modified":1484453288127},{"_id":"themes/yilia/source-src/css/tools.scss","hash":"f5bed08765a8f0a344af5d4781ff822a57028148","modified":1484453288130},{"_id":"themes/yilia/source-src/css/tooltip.scss","hash":"b81cedbe31accca82e597801186911a7b5e6841c","modified":1484453288131},{"_id":"themes/yilia/source-src/css/tags-cloud.scss","hash":"399744e98e7c67939ed9b23c2670d8baad044eda","modified":1484453288129},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1484453288143},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1484453288147},{"_id":"themes/yilia/source/fonts/iconfont.59e68b.eot","hash":"b7f28dc802d6e32281e8fe7930d4dd2022d00717","modified":1484453288144},{"_id":"themes/yilia/source/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1484453288148},{"_id":"themes/yilia/source/fonts/iconfont.b7ae25.ttf","hash":"697449e7790edd12e208706ecaa8d5d0eed44cde","modified":1484453288145},{"_id":"themes/yilia/source/fonts/iconfont.ca3627.woff","hash":"cda0ea1dc25dc3d329d7637afe2cd6aec37e351b","modified":1484453288146},{"_id":"themes/yilia/source/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1484453288149},{"_id":"themes/yilia/source/fonts/iconfont.dba24b.svg","hash":"f6c8d119c14f2124f4362acd6c8e00f209af5613","modified":1484453288146},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1484453288152},{"_id":"themes/yilia/source-src/js/browser.js","hash":"4dc04845cf27f350922b63f1813a9c82e6e33b05","modified":1484453288134},{"_id":"themes/yilia/source-src/js/anm.js","hash":"d18f6276a352b871390a4112d479b9e58b8cdbbe","modified":1484453288133},{"_id":"themes/yilia/source-src/js/Q.js","hash":"e56d9710afa79b31ca6b9fbd845f6d1895f5214b","modified":1484453288133},{"_id":"themes/yilia/source-src/js/main.js","hash":"93ca570a646c6087821d7b14cb1646bb2a0274f4","modified":1484453288136},{"_id":"themes/yilia/source-src/js/fix.js","hash":"eccdcc7ee79adebf450bc655b2e80eb6801421a6","modified":1484453288135},{"_id":"themes/yilia/source-src/js/report.js","hash":"57680f9a23bd0a1eaafd64ae08cc33e20627ab15","modified":1484453288138},{"_id":"themes/yilia/source-src/js/mobile.js","hash":"461c08ffcbc724d74ec7e0ff38e171eefe0f89fd","modified":1484453288137},{"_id":"themes/yilia/source-src/js/share.js","hash":"d4ccff8266c37363b3904226f5d035b7db882c61","modified":1484453288138},{"_id":"themes/yilia/source-src/js/slider.js","hash":"707842efee006e3ea9b6765d7460f4ef4f08e41f","modified":1484453288139},{"_id":"themes/yilia/source-src/js/util.js","hash":"3bcdeb95072b85600874424e6929e3e22cfddaa0","modified":1484453288140},{"_id":"themes/yilia/source-src/js/viewer.js","hash":"3e0fd4479a40ddbd1571c6c953df7e23637b61f5","modified":1484453288140},{"_id":"themes/yilia/.git/refs/heads/master","hash":"9db2b294947ca04c0fa82b27ed194c3bc0d6e5dc","modified":1484453288047},{"_id":"themes/yilia/.git/objects/pack/pack-e3c1d3bd1b667d26cce6887ab94ece590050d28b.idx","hash":"54577b72937a10ba4742b52248c1a0fcab4ab307","modified":1484453287986},{"_id":"themes/yilia/layout/_partial/post/nav.ejs","hash":"b6a97043f9ec37e571aacacfedcda1d4d75e3c7c","modified":1484453288090},{"_id":"themes/yilia/layout/_partial/post/category.ejs","hash":"f75b236818b6c0ec0e5e6c12a517825d6230d756","modified":1484453288088},{"_id":"themes/yilia/layout/_partial/post/tag.ejs","hash":"2c4e4ca36c9bb4318506c38aca7127f1f44d827f","modified":1484453288091},{"_id":"themes/yilia/layout/_partial/post/duoshuo.ejs","hash":"f6b4c4eaafb5ac386273354b5f64a26139b7a3b0","modified":1484453288090},{"_id":"themes/yilia/layout/_partial/post/date.ejs","hash":"aae96de18d48cd3b9b7bf6fed0100e15b53cca97","modified":1484453288089},{"_id":"themes/yilia/layout/_partial/post/share.ejs","hash":"06a2dd18ac9a43fbc9a59c61e6f795f9326e9927","modified":1484453288091},{"_id":"themes/yilia/layout/_partial/post/title.ejs","hash":"d4a460a35e2112d0c7414fd5e19b3a16093f1caf","modified":1484453288092},{"_id":"themes/yilia/source-src/css/core/_media-queries.scss","hash":"262ffcd88775080b7f511db37f58d2bcb1b2bfc7","modified":1484453288102},{"_id":"themes/yilia/source-src/css/core/_mixin.scss","hash":"91db061c9c17628291a005e5bd4936cf9d35a6c4","modified":1484453288102},{"_id":"themes/yilia/source-src/css/core/_animation.scss","hash":"1834c3ed8560716e63bb3a50be94cac87fbbeaf3","modified":1484453288102},{"_id":"themes/yilia/source-src/css/core/_reset.scss","hash":"398a49913b4a47d928103562b1ce94520be4026a","modified":1484453288102},{"_id":"themes/yilia/source-src/css/core/_variables.scss","hash":"6e75bdaa46de83094ba0873099c6e7d656a22453","modified":1484453288102},{"_id":"themes/yilia/source-src/css/fonts/iconfont.woff","hash":"cda0ea1dc25dc3d329d7637afe2cd6aec37e351b","modified":1484453288102},{"_id":"themes/yilia/source-src/css/fonts/iconfont.svg","hash":"f6c8d119c14f2124f4362acd6c8e00f209af5613","modified":1484453288102},{"_id":"themes/yilia/source-src/css/fonts/iconfont.eot","hash":"b7f28dc802d6e32281e8fe7930d4dd2022d00717","modified":1484453288102},{"_id":"themes/yilia/source-src/css/fonts/iconfont.ttf","hash":"697449e7790edd12e208706ecaa8d5d0eed44cde","modified":1484453288102},{"_id":"themes/yilia/source-src/css/img/checkered-pattern.png","hash":"049262fa0886989d750637b264bed34ab51c23c8","modified":1484453288120},{"_id":"themes/yilia/source-src/css/img/tooltip.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1484453288122},{"_id":"themes/yilia/source-src/css/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1484453288121},{"_id":"themes/yilia/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1484453288038},{"_id":"themes/yilia/.git/logs/refs/heads/master","hash":"6f70f19051847fa998349620726e041660442022","modified":1484453288050},{"_id":"themes/yilia/.git/logs/refs/remotes/origin/HEAD","hash":"6f70f19051847fa998349620726e041660442022","modified":1484453288037},{"_id":"themes/yilia/.git/objects/pack/pack-e3c1d3bd1b667d26cce6887ab94ece590050d28b.pack","hash":"43df61aed337d456b45336f7a95a6db4c5692932","modified":1484453287986},{"_id":"public/new 1.html","hash":"7a55116d4dedbc25b27feae5a890375b85aa1568","modified":1487683546204},{"_id":"public/2017/01/09/route/index.html","hash":"ecb9569b4f955946747a91cf3a2c22027bfdc8c6","modified":1487683546204},{"_id":"public/2017/01/04/atom/index.html","hash":"27164f8be4c96eee085a70b67a5051a495382dbd","modified":1487683546204},{"_id":"public/2017/01/10/box/index.html","hash":"4f4c20defadc01f0cc7801fd256143c7e8a5192b","modified":1487683546204},{"_id":"public/2017/02/16/gulp/index.html","hash":"3882883ada93911f35d262f5f7f6a7d9b32330a6","modified":1487683546205},{"_id":"public/2017/01/04/landingpage/index.html","hash":"3a4a58b5c48b151214e9c2bcb000b7ad3114b9d6","modified":1487683546205},{"_id":"public/2017/01/03/ionicSlide/index.html","hash":"f0e4483980adc4d3fb9519a23fe7dc0a436aaa5a","modified":1487683546205},{"_id":"public/2016/12/31/jsclosure/index.html","hash":"905e5313ba2f10a1556f50f15f2416b5d7b042e1","modified":1487683546205},{"_id":"public/2017/01/03/googleadinionic/index.html","hash":"40c24a5d70d29146a71f26a9b9019c6b9d620a96","modified":1487683546206},{"_id":"public/2016/12/29/less/index.html","hash":"feef16b7ad201dbb99a547ff635ed09d0d82ea96","modified":1487683546206},{"_id":"public/2016/12/27/staticStorage/index.html","hash":"ceb7bb79455870756e0427387427410e5fa0ca0b","modified":1487683546206},{"_id":"public/2016/12/26/angularTips/index.html","hash":"3911010ed3bde43adaa860a37f53d1442da4e72c","modified":1487683546206},{"_id":"public/archives/index.html","hash":"a4a89e30a14ae56e33fc29d776bea0551a1df589","modified":1487683546206},{"_id":"public/2016/12/26/carouselFigure/index.html","hash":"1f13630f0c43141c194dcf5fd9596e3865341556","modified":1487683546206},{"_id":"public/archives/page/2/index.html","hash":"d9a92cdc16343436fa8adb542f79f8e6b32e92ec","modified":1487683546206},{"_id":"public/archives/2016/index.html","hash":"791834ab16df70cf6f854b7279b9f838c221a090","modified":1487683546206},{"_id":"public/archives/2016/12/index.html","hash":"4917f1365f6d2bf0c381ecb97fbec60cce6a0783","modified":1487683546207},{"_id":"public/archives/2017/index.html","hash":"6f7fbbe4a163e1b4c16180f616fb521fe8617b25","modified":1487683546207},{"_id":"public/tags/angular1/index.html","hash":"27743e7fa50aff67893051416162f9076c6a8f37","modified":1487683546207},{"_id":"public/archives/2017/01/index.html","hash":"23761f78ea382cd24fcb7878fbbbcd7323d8b5f6","modified":1487683546207},{"_id":"public/tags/html-css/index.html","hash":"c66c88164f95bee7ba99f3bb2b1ac1cefdfa2d8d","modified":1487683546207},{"_id":"public/tags/无限轮播图Demo/index.html","hash":"44820ecc20bb960c656b1b9dc27a8b31b3f939c6","modified":1487683546207},{"_id":"public/tags/atom-plug/index.html","hash":"ae9175c8d985045af3aef3cdeb4f5930eec41325","modified":1487683546207},{"_id":"public/archives/2017/02/index.html","hash":"b99a7009a4ddb5c52c55aceacdd5056d7e516468","modified":1487683546207},{"_id":"public/tags/前端自动化/index.html","hash":"1ef4bae3db833165efd47b475af840eb50e3cb5c","modified":1487683546207},{"_id":"public/tags/ionic-angular/index.html","hash":"3a5edd7cd3c413e7d7b1b6f4d30526277a1268c2","modified":1487683546207},{"_id":"public/tags/ionic-angular-googleAD/index.html","hash":"28e3aa4b21ed3f842fff204602d47a553ebce3ce","modified":1487683546208},{"_id":"public/tags/javascript/index.html","hash":"907855218c5c62767bbab3d1d5a6f89c3b44f936","modified":1487683546208},{"_id":"public/tags/StaticStorage/index.html","hash":"91bdc69a884f0a69ea2715ba85af28df6be85394","modified":1487683546208},{"_id":"public/tags/路由/index.html","hash":"976146ba5397b9f50c4e1b4b5e435b9595582aa4","modified":1487683546208},{"_id":"public/tags/yeoman-gulp-bower-landingpage/index.html","hash":"2878f4f59dd06389f90627f2c481eb47105283d2","modified":1487683546208},{"_id":"public/index.html","hash":"5cb5a5ebb05c9bff2f71edd97e476a92304d6734","modified":1487683546208},{"_id":"public/tags/less-base/index.html","hash":"c003d691a86aaf6176f0d582a7bbbdd225371972","modified":1487683546208},{"_id":"public/page/2/index.html","hash":"a716282198361cd90d42773de5e492f5b6fafe97","modified":1487683546208},{"_id":"public/CNAME","hash":"67dac453e7a2a6a42bed94e9aa1f1a4097fbfefe","modified":1487683546213},{"_id":"public/favicon.png","hash":"39a38b3f98ee78738759ae9b1f5f47c365bec035","modified":1487683546213},{"_id":"public/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1487683546213},{"_id":"public/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1487683546213},{"_id":"public/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1487683546219},{"_id":"public/fonts/iconfont.59e68b.eot","hash":"b7f28dc802d6e32281e8fe7930d4dd2022d00717","modified":1487683546219},{"_id":"public/fonts/iconfont.b7ae25.ttf","hash":"697449e7790edd12e208706ecaa8d5d0eed44cde","modified":1487683546222},{"_id":"public/fonts/iconfont.ca3627.woff","hash":"cda0ea1dc25dc3d329d7637afe2cd6aec37e351b","modified":1487683546222},{"_id":"public/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1487683546222},{"_id":"public/fonts/iconfont.dba24b.svg","hash":"f6c8d119c14f2124f4362acd6c8e00f209af5613","modified":1487683546223},{"_id":"public/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1487683546223},{"_id":"public/main.04d600.css","hash":"c309880e289ebd6060f7053cdc702f8a9f5f6976","modified":1487683546225},{"_id":"public/mobile.d238ee.js","hash":"a054884092af1cc5c2c14e5e11a4dac6d9254481","modified":1487683546226},{"_id":"public/slider.885efe.js","hash":"1f1a6548c6016cc132bf65a1701cc8421a1f8414","modified":1487683546226},{"_id":"public/main.04d600.js","hash":"988c141a741441812bcf4c408ef530d7a01522f3","modified":1487683546226}],"Category":[],"Data":[],"Page":[{"_content":"<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\">\n    <title></title>\n    <style>\n      #canvas,#video {\n        float: left;\n        margin-right: 10px;\n        background: #fff;\n      }\n      .box {\n        overflow: hidden;\n        margin-bottom: 10px;\n      }\n    </style>\n  </head>\n  <body>\n    <div class=\"box\">\n      <video id=\"video\" width=\"400\" height=\"300\"></video>\n      <canvas id=\"canvas\"></canvas>\n    </div>\n    <button id=\"live\">直播</button>\n    <button id=\"snap\">截图</button>\n    <script>\n      var video = document.getElementById('video');\n      var canvas = document.getElementById('canvas');\n      var ctx = canvas.getContext('2d');\n      var width = video.width;\n      var height = video.height;\n      canvas.width = width;\n      canvas.height = height;\n      navigator.getUserMedia =  navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia;\n     /* function liveVideo(){\n        var URL = window.URL || window.webkitURL;   // 获取到window.URL对象\n        navigator.getUserMedia({\n          video: true\n        }, function(stream){\n          video.src = URL.createObjectURL(stream);   // 将获取到的视频流对象转换为地址\n          video.play();   // 播放\n          //点击截图\n          document.getElementById(\"snap\").addEventListener('click', function() {\n            ctx.drawImage(video, 0, 0, width, height);\n            var url = canvas.toDataURL('image/png');\n            document.getElementById('download').href = url;\n          });\n        }, function(error){\n          console.log(error.name || error);\n        });\n      }   */\n      document.getElementById(\"live\").addEventListener('click',function(){\n//        liveVideo();\n        var URL = window.URL || window.webkitURL;   // 获取到window.URL对象\n        navigator.getUserMedia({\n          video: true\n        }, function(stream){\n          video.src = URL.createObjectURL(stream);   // 将获取到的视频流对象转换为地址\n          video.play();   // 播放\n          //点击截图\n          document.getElementById(\"snap\").addEventListener('click', function() {\n            ctx.drawImage(video, 0, 0, width, height);\n            var url = canvas.toDataURL('image/png');\n            document.getElementById('download').href = url;\n          });\n        }, function(error){\n          console.log(error.name || error);\n        });\n      });\n    </script>\n  </body>\n</html>\n","source":"new 1.html","raw":"<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\">\n    <title></title>\n    <style>\n      #canvas,#video {\n        float: left;\n        margin-right: 10px;\n        background: #fff;\n      }\n      .box {\n        overflow: hidden;\n        margin-bottom: 10px;\n      }\n    </style>\n  </head>\n  <body>\n    <div class=\"box\">\n      <video id=\"video\" width=\"400\" height=\"300\"></video>\n      <canvas id=\"canvas\"></canvas>\n    </div>\n    <button id=\"live\">直播</button>\n    <button id=\"snap\">截图</button>\n    <script>\n      var video = document.getElementById('video');\n      var canvas = document.getElementById('canvas');\n      var ctx = canvas.getContext('2d');\n      var width = video.width;\n      var height = video.height;\n      canvas.width = width;\n      canvas.height = height;\n      navigator.getUserMedia =  navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia;\n     /* function liveVideo(){\n        var URL = window.URL || window.webkitURL;   // 获取到window.URL对象\n        navigator.getUserMedia({\n          video: true\n        }, function(stream){\n          video.src = URL.createObjectURL(stream);   // 将获取到的视频流对象转换为地址\n          video.play();   // 播放\n          //点击截图\n          document.getElementById(\"snap\").addEventListener('click', function() {\n            ctx.drawImage(video, 0, 0, width, height);\n            var url = canvas.toDataURL('image/png');\n            document.getElementById('download').href = url;\n          });\n        }, function(error){\n          console.log(error.name || error);\n        });\n      }   */\n      document.getElementById(\"live\").addEventListener('click',function(){\n//        liveVideo();\n        var URL = window.URL || window.webkitURL;   // 获取到window.URL对象\n        navigator.getUserMedia({\n          video: true\n        }, function(stream){\n          video.src = URL.createObjectURL(stream);   // 将获取到的视频流对象转换为地址\n          video.play();   // 播放\n          //点击截图\n          document.getElementById(\"snap\").addEventListener('click', function() {\n            ctx.drawImage(video, 0, 0, width, height);\n            var url = canvas.toDataURL('image/png');\n            document.getElementById('download').href = url;\n          });\n        }, function(error){\n          console.log(error.name || error);\n        });\n      });\n    </script>\n  </body>\n</html>\n","date":"2017-02-09T13:21:38.696Z","updated":"2017-02-09T13:21:38.696Z","path":"new 1.html","title":"","comments":1,"layout":"page","_id":"cizfkde1w00004cw5b3tfof7t","content":"<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\">\n    <title></title>\n    <style>\n      #canvas,#video {\n        float: left;\n        margin-right: 10px;\n        background: #fff;\n      }\n      .box {\n        overflow: hidden;\n        margin-bottom: 10px;\n      }\n    </style>\n  </head>\n  <body>\n    <div class=\"box\">\n      <video id=\"video\" width=\"400\" height=\"300\"></video>\n      <canvas id=\"canvas\"></canvas>\n    </div>\n    <button id=\"live\">直播</button>\n    <button id=\"snap\">截图</button>\n    <script>\n      var video = document.getElementById('video');\n      var canvas = document.getElementById('canvas');\n      var ctx = canvas.getContext('2d');\n      var width = video.width;\n      var height = video.height;\n      canvas.width = width;\n      canvas.height = height;\n      navigator.getUserMedia =  navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia;\n     /* function liveVideo(){\n        var URL = window.URL || window.webkitURL;   // 获取到window.URL对象\n        navigator.getUserMedia({\n          video: true\n        }, function(stream){\n          video.src = URL.createObjectURL(stream);   // 将获取到的视频流对象转换为地址\n          video.play();   // 播放\n          //点击截图\n          document.getElementById(\"snap\").addEventListener('click', function() {\n            ctx.drawImage(video, 0, 0, width, height);\n            var url = canvas.toDataURL('image/png');\n            document.getElementById('download').href = url;\n          });\n        }, function(error){\n          console.log(error.name || error);\n        });\n      }   */\n      document.getElementById(\"live\").addEventListener('click',function(){\n//        liveVideo();\n        var URL = window.URL || window.webkitURL;   // 获取到window.URL对象\n        navigator.getUserMedia({\n          video: true\n        }, function(stream){\n          video.src = URL.createObjectURL(stream);   // 将获取到的视频流对象转换为地址\n          video.play();   // 播放\n          //点击截图\n          document.getElementById(\"snap\").addEventListener('click', function() {\n            ctx.drawImage(video, 0, 0, width, height);\n            var url = canvas.toDataURL('image/png');\n            document.getElementById('download').href = url;\n          });\n        }, function(error){\n          console.log(error.name || error);\n        });\n      });\n    </script>\n  </body>\n</html>\n","excerpt":"","more":"<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\">\n    <title></title>\n    <style>\n      #canvas,#video {\n        float: left;\n        margin-right: 10px;\n        background: #fff;\n      }\n      .box {\n        overflow: hidden;\n        margin-bottom: 10px;\n      }\n    </style>\n  </head>\n  <body>\n    <div class=\"box\">\n      <video id=\"video\" width=\"400\" height=\"300\"></video>\n      <canvas id=\"canvas\"></canvas>\n    </div>\n    <button id=\"live\">直播</button>\n    <button id=\"snap\">截图</button>\n    <script>\n      var video = document.getElementById('video');\n      var canvas = document.getElementById('canvas');\n      var ctx = canvas.getContext('2d');\n      var width = video.width;\n      var height = video.height;\n      canvas.width = width;\n      canvas.height = height;\n      navigator.getUserMedia =  navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia;\n     /* function liveVideo(){\n        var URL = window.URL || window.webkitURL;   // 获取到window.URL对象\n        navigator.getUserMedia({\n          video: true\n        }, function(stream){\n          video.src = URL.createObjectURL(stream);   // 将获取到的视频流对象转换为地址\n          video.play();   // 播放\n          //点击截图\n          document.getElementById(\"snap\").addEventListener('click', function() {\n            ctx.drawImage(video, 0, 0, width, height);\n            var url = canvas.toDataURL('image/png');\n            document.getElementById('download').href = url;\n          });\n        }, function(error){\n          console.log(error.name || error);\n        });\n      }   */\n      document.getElementById(\"live\").addEventListener('click',function(){\n//        liveVideo();\n        var URL = window.URL || window.webkitURL;   // 获取到window.URL对象\n        navigator.getUserMedia({\n          video: true\n        }, function(stream){\n          video.src = URL.createObjectURL(stream);   // 将获取到的视频流对象转换为地址\n          video.play();   // 播放\n          //点击截图\n          document.getElementById(\"snap\").addEventListener('click', function() {\n            ctx.drawImage(video, 0, 0, width, height);\n            var url = canvas.toDataURL('image/png');\n            document.getElementById('download').href = url;\n          });\n        }, function(error){\n          console.log(error.name || error);\n        });\n      });\n    </script>\n  </body>\n</html>\n"}],"Post":[{"title":"AngularTips","date":"2016-12-26T14:18:23.000Z","_content":"最近用angular1做了个项目，项目马上快结束了，但遇到个大问题--网站的SEO优化。按照SEO的同事的要求，需要在地址栏中输入参数就可以查询。不过我们使用的是ui-route,是使用下面这种方式来进行页面间传值:\n```javascript\n.state('tab.result',{\n    url: '/result/:country/:city/:region/:pricerange/:room/:forsale/:type/:indoor/:outdoor',\n    views:{\n        'tab-dash':{\n            templateUrl:'templates/result.html',\n            controller:'resultCtrl'\n        }\n    }\n})\n```\n这种传值方法有个很大的问题，就是参数为空时，url地址就会产生很多斜杠\n```txt\nresult/country////////\n```\n\n后来请教大神，才得知上面这种方式是参数必传，还有一种是参数可以选传\n```javascript\n.state('tab.refresh',{\n    url:'/refresh/:country?/:city?/:region?/:pricerange?/:room?/:forsale?/:type?/:indoor?/:outdoor?',\n    views:{\n        'tab-dash':{\n            templateUrl:'templates/refresh.html',\n            controller:'refreshCtrl'\n        }\n    }\n})\n```\n修改后的url地址就为\n```txt\nrefresh?country=US&city=1231\n```\n","source":"_posts/angularTips.md","raw":"---\ntitle: AngularTips\ndate: 2016-12-26 22:18:23\ntags: angular1\n---\n最近用angular1做了个项目，项目马上快结束了，但遇到个大问题--网站的SEO优化。按照SEO的同事的要求，需要在地址栏中输入参数就可以查询。不过我们使用的是ui-route,是使用下面这种方式来进行页面间传值:\n```javascript\n.state('tab.result',{\n    url: '/result/:country/:city/:region/:pricerange/:room/:forsale/:type/:indoor/:outdoor',\n    views:{\n        'tab-dash':{\n            templateUrl:'templates/result.html',\n            controller:'resultCtrl'\n        }\n    }\n})\n```\n这种传值方法有个很大的问题，就是参数为空时，url地址就会产生很多斜杠\n```txt\nresult/country////////\n```\n\n后来请教大神，才得知上面这种方式是参数必传，还有一种是参数可以选传\n```javascript\n.state('tab.refresh',{\n    url:'/refresh/:country?/:city?/:region?/:pricerange?/:room?/:forsale?/:type?/:indoor?/:outdoor?',\n    views:{\n        'tab-dash':{\n            templateUrl:'templates/refresh.html',\n            controller:'refreshCtrl'\n        }\n    }\n})\n```\n修改后的url地址就为\n```txt\nrefresh?country=US&city=1231\n```\n","slug":"angularTips","published":1,"updated":"2017-02-08T13:17:10.764Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizfkde3500014cw57c54q9v6","content":"<p>最近用angular1做了个项目，项目马上快结束了，但遇到个大问题–网站的SEO优化。按照SEO的同事的要求，需要在地址栏中输入参数就可以查询。不过我们使用的是ui-route,是使用下面这种方式来进行页面间传值:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">.state(<span class=\"string\">'tab.result'</span>,&#123;</div><div class=\"line\">    <span class=\"attr\">url</span>: <span class=\"string\">'/result/:country/:city/:region/:pricerange/:room/:forsale/:type/:indoor/:outdoor'</span>,</div><div class=\"line\">    <span class=\"attr\">views</span>:&#123;</div><div class=\"line\">        <span class=\"string\">'tab-dash'</span>:&#123;</div><div class=\"line\">            <span class=\"attr\">templateUrl</span>:<span class=\"string\">'templates/result.html'</span>,</div><div class=\"line\">            <span class=\"attr\">controller</span>:<span class=\"string\">'resultCtrl'</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>这种传值方法有个很大的问题，就是参数为空时，url地址就会产生很多斜杠<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">result/country////////</div></pre></td></tr></table></figure></p>\n<p>后来请教大神，才得知上面这种方式是参数必传，还有一种是参数可以选传<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">.state(<span class=\"string\">'tab.refresh'</span>,&#123;</div><div class=\"line\">    <span class=\"attr\">url</span>:<span class=\"string\">'/refresh/:country?/:city?/:region?/:pricerange?/:room?/:forsale?/:type?/:indoor?/:outdoor?'</span>,</div><div class=\"line\">    <span class=\"attr\">views</span>:&#123;</div><div class=\"line\">        <span class=\"string\">'tab-dash'</span>:&#123;</div><div class=\"line\">            <span class=\"attr\">templateUrl</span>:<span class=\"string\">'templates/refresh.html'</span>,</div><div class=\"line\">            <span class=\"attr\">controller</span>:<span class=\"string\">'refreshCtrl'</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>修改后的url地址就为<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">refresh?country=US&amp;city=1231</div></pre></td></tr></table></figure></p>\n","excerpt":"","more":"<p>最近用angular1做了个项目，项目马上快结束了，但遇到个大问题–网站的SEO优化。按照SEO的同事的要求，需要在地址栏中输入参数就可以查询。不过我们使用的是ui-route,是使用下面这种方式来进行页面间传值:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">.state(<span class=\"string\">'tab.result'</span>,&#123;</div><div class=\"line\">    <span class=\"attr\">url</span>: <span class=\"string\">'/result/:country/:city/:region/:pricerange/:room/:forsale/:type/:indoor/:outdoor'</span>,</div><div class=\"line\">    <span class=\"attr\">views</span>:&#123;</div><div class=\"line\">        <span class=\"string\">'tab-dash'</span>:&#123;</div><div class=\"line\">            <span class=\"attr\">templateUrl</span>:<span class=\"string\">'templates/result.html'</span>,</div><div class=\"line\">            <span class=\"attr\">controller</span>:<span class=\"string\">'resultCtrl'</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>这种传值方法有个很大的问题，就是参数为空时，url地址就会产生很多斜杠<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">result/country////////</div></pre></td></tr></table></figure></p>\n<p>后来请教大神，才得知上面这种方式是参数必传，还有一种是参数可以选传<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">.state(<span class=\"string\">'tab.refresh'</span>,&#123;</div><div class=\"line\">    <span class=\"attr\">url</span>:<span class=\"string\">'/refresh/:country?/:city?/:region?/:pricerange?/:room?/:forsale?/:type?/:indoor?/:outdoor?'</span>,</div><div class=\"line\">    <span class=\"attr\">views</span>:&#123;</div><div class=\"line\">        <span class=\"string\">'tab-dash'</span>:&#123;</div><div class=\"line\">            <span class=\"attr\">templateUrl</span>:<span class=\"string\">'templates/refresh.html'</span>,</div><div class=\"line\">            <span class=\"attr\">controller</span>:<span class=\"string\">'refreshCtrl'</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>修改后的url地址就为<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">refresh?country=US&amp;city=1231</div></pre></td></tr></table></figure></p>\n"},{"title":"box","date":"2017-01-10T14:29:18.000Z","_content":"\n盒子模型是前段页面编写中最基本的知识点，也是元素排列最根本的原理。在一个页面中，所有的元素的上下左右的间距，剧中，都需要用到盒子模型。用文字来描述它是非常困难的，因而需要图片来解释，但还是不够形象。故此，我使用建模软件将它画出来，更具体得解释盒子模型\n![3D视图](http://ojioqa2pk.bkt.clouddn.com/%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B.png)\n盒子的立体模型\n![顶部视图](http://ojioqa2pk.bkt.clouddn.com/QQ%E5%9B%BE%E7%89%8720170110230001.png)\n平面模型\n注：内容部分（粉色）原本是遮住背景图片和背景颜色的，这里为了方便展示，所以右移显示。\n这里讲的盒子模型是IE盒子模型\n","source":"_posts/box.md","raw":"---\ntitle: box\ndate: 2017-01-10 22:29:18\ntags: html,css\n---\n\n盒子模型是前段页面编写中最基本的知识点，也是元素排列最根本的原理。在一个页面中，所有的元素的上下左右的间距，剧中，都需要用到盒子模型。用文字来描述它是非常困难的，因而需要图片来解释，但还是不够形象。故此，我使用建模软件将它画出来，更具体得解释盒子模型\n![3D视图](http://ojioqa2pk.bkt.clouddn.com/%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B.png)\n盒子的立体模型\n![顶部视图](http://ojioqa2pk.bkt.clouddn.com/QQ%E5%9B%BE%E7%89%8720170110230001.png)\n平面模型\n注：内容部分（粉色）原本是遮住背景图片和背景颜色的，这里为了方便展示，所以右移显示。\n这里讲的盒子模型是IE盒子模型\n","slug":"box","published":1,"updated":"2017-01-16T14:00:00.261Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizfkde3a00024cw5hsszizgr","content":"<p>盒子模型是前段页面编写中最基本的知识点，也是元素排列最根本的原理。在一个页面中，所有的元素的上下左右的间距，剧中，都需要用到盒子模型。用文字来描述它是非常困难的，因而需要图片来解释，但还是不够形象。故此，我使用建模软件将它画出来，更具体得解释盒子模型<br><img src=\"http://ojioqa2pk.bkt.clouddn.com/%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B.png\" alt=\"3D视图\"><br>盒子的立体模型<br><img src=\"http://ojioqa2pk.bkt.clouddn.com/QQ%E5%9B%BE%E7%89%8720170110230001.png\" alt=\"顶部视图\"><br>平面模型<br>注：内容部分（粉色）原本是遮住背景图片和背景颜色的，这里为了方便展示，所以右移显示。<br>这里讲的盒子模型是IE盒子模型</p>\n","excerpt":"","more":"<p>盒子模型是前段页面编写中最基本的知识点，也是元素排列最根本的原理。在一个页面中，所有的元素的上下左右的间距，剧中，都需要用到盒子模型。用文字来描述它是非常困难的，因而需要图片来解释，但还是不够形象。故此，我使用建模软件将它画出来，更具体得解释盒子模型<br><img src=\"http://ojioqa2pk.bkt.clouddn.com/%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B.png\" alt=\"3D视图\"><br>盒子的立体模型<br><img src=\"http://ojioqa2pk.bkt.clouddn.com/QQ%E5%9B%BE%E7%89%8720170110230001.png\" alt=\"顶部视图\"><br>平面模型<br>注：内容部分（粉色）原本是遮住背景图片和背景颜色的，这里为了方便展示，所以右移显示。<br>这里讲的盒子模型是IE盒子模型</p>\n"},{"title":"atom","date":"2017-01-04T14:00:29.000Z","_content":"\n从开始接触编程，就接触到了各种IDE，上学时写java用eclipse到实习用的myeclipse。这些都是后台使用的IDE，虽然也可以用来编写前端页面，但对于前端不友好。专注于前端的IDE，我刚开始就只知道Dreamwear,以为它自带提示功能太强大了。一段时间后看到了webstrom，赶脚DW弱爆了，界面丑就算啦，装插件还各种麻烦，马上投入Webstorm的怀抱。好景不长，使用Webstorm一段时间后，我发现WS及其耗内存，打开几个项目8G的内存就已经爆满啦再加上photoshop更是雪上加霜。sublimetext和atom出现在我眼前，因为sublimetext是收费的，而atom是免费哒，果断选atom。最近看到atom有一个非常绚丽的效果，但是安装过程中出现了各种问题，记录一下。\n\n1 github下载包安装\n-----\n首先当然是安装atom啦，安装完成后，在atom的用户目录下，找到<code>.atom</code>文件夹，注意不是atom的安装目录。\n```code\nC:\\Users\\jinge\\.atom\\packages\n```\n用git克隆下插件的包\n包的地址\n```code\nhttps://github.com/JoelBesada/activate-power-mode.git\n```\n克隆完成后，进入到插件的目录下\n```code\ncd C:\\Users\\jinge\\.atom\\packages\\activate-power-mode\n```\n然后输入\n```code\napm install\n```\n如果提示没有apm这个命令，就需要在系统环境变量中添加。\n如果看到<code>Install modules done</code>,就说明安装成功啦\n运行atom,如果没有效果，可以使用快捷键<code>Ctrl+Alt+o</code>\n\n2 在atom中安装插件\n----\n打开atom，\nfile=>setting=>install\n在选项卡中输入activate-power-mode\n在插件列表中选择当前插件，然后安装即可\n\ntips\n---\n查看当前系统环境，因为这个插件是使用C++写的，因此需要一些特殊的环境。可以使用<code>apm -version</code>来查看\n```bash\nC:\\Users\\jinge\\.atom\\packages>apm -version\napm  1.12.9\nnpm  3.10.5\nnode 4.4.5\npython\ngit 2.11.0.windows.1\nvisual studio\n```\n","source":"_posts/atom.md","raw":"---\ntitle: atom\ndate: 2017-01-04 22:00:29\ntags: atom plug\n---\n\n从开始接触编程，就接触到了各种IDE，上学时写java用eclipse到实习用的myeclipse。这些都是后台使用的IDE，虽然也可以用来编写前端页面，但对于前端不友好。专注于前端的IDE，我刚开始就只知道Dreamwear,以为它自带提示功能太强大了。一段时间后看到了webstrom，赶脚DW弱爆了，界面丑就算啦，装插件还各种麻烦，马上投入Webstorm的怀抱。好景不长，使用Webstorm一段时间后，我发现WS及其耗内存，打开几个项目8G的内存就已经爆满啦再加上photoshop更是雪上加霜。sublimetext和atom出现在我眼前，因为sublimetext是收费的，而atom是免费哒，果断选atom。最近看到atom有一个非常绚丽的效果，但是安装过程中出现了各种问题，记录一下。\n\n1 github下载包安装\n-----\n首先当然是安装atom啦，安装完成后，在atom的用户目录下，找到<code>.atom</code>文件夹，注意不是atom的安装目录。\n```code\nC:\\Users\\jinge\\.atom\\packages\n```\n用git克隆下插件的包\n包的地址\n```code\nhttps://github.com/JoelBesada/activate-power-mode.git\n```\n克隆完成后，进入到插件的目录下\n```code\ncd C:\\Users\\jinge\\.atom\\packages\\activate-power-mode\n```\n然后输入\n```code\napm install\n```\n如果提示没有apm这个命令，就需要在系统环境变量中添加。\n如果看到<code>Install modules done</code>,就说明安装成功啦\n运行atom,如果没有效果，可以使用快捷键<code>Ctrl+Alt+o</code>\n\n2 在atom中安装插件\n----\n打开atom，\nfile=>setting=>install\n在选项卡中输入activate-power-mode\n在插件列表中选择当前插件，然后安装即可\n\ntips\n---\n查看当前系统环境，因为这个插件是使用C++写的，因此需要一些特殊的环境。可以使用<code>apm -version</code>来查看\n```bash\nC:\\Users\\jinge\\.atom\\packages>apm -version\napm  1.12.9\nnpm  3.10.5\nnode 4.4.5\npython\ngit 2.11.0.windows.1\nvisual studio\n```\n","slug":"atom","published":1,"updated":"2017-01-04T14:50:48.646Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizfkde3f00044cw5igz1hnn7","content":"<p>从开始接触编程，就接触到了各种IDE，上学时写java用eclipse到实习用的myeclipse。这些都是后台使用的IDE，虽然也可以用来编写前端页面，但对于前端不友好。专注于前端的IDE，我刚开始就只知道Dreamwear,以为它自带提示功能太强大了。一段时间后看到了webstrom，赶脚DW弱爆了，界面丑就算啦，装插件还各种麻烦，马上投入Webstorm的怀抱。好景不长，使用Webstorm一段时间后，我发现WS及其耗内存，打开几个项目8G的内存就已经爆满啦再加上photoshop更是雪上加霜。sublimetext和atom出现在我眼前，因为sublimetext是收费的，而atom是免费哒，果断选atom。最近看到atom有一个非常绚丽的效果，但是安装过程中出现了各种问题，记录一下。</p>\n<h2 id=\"1-github下载包安装\"><a href=\"#1-github下载包安装\" class=\"headerlink\" title=\"1 github下载包安装\"></a>1 github下载包安装</h2><p>首先当然是安装atom啦，安装完成后，在atom的用户目录下，找到<code>.atom</code>文件夹，注意不是atom的安装目录。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">C:\\Users\\jinge\\.atom\\packages</div></pre></td></tr></table></figure></p>\n<p>用git克隆下插件的包<br>包的地址<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">https://github.com/JoelBesada/activate-power-mode.git</div></pre></td></tr></table></figure></p>\n<p>克隆完成后，进入到插件的目录下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd C:\\Users\\jinge\\.atom\\packages\\activate-power-mode</div></pre></td></tr></table></figure></p>\n<p>然后输入<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">apm install</div></pre></td></tr></table></figure></p>\n<p>如果提示没有apm这个命令，就需要在系统环境变量中添加。<br>如果看到<code>Install modules done</code>,就说明安装成功啦<br>运行atom,如果没有效果，可以使用快捷键<code>Ctrl+Alt+o</code></p>\n<h2 id=\"2-在atom中安装插件\"><a href=\"#2-在atom中安装插件\" class=\"headerlink\" title=\"2 在atom中安装插件\"></a>2 在atom中安装插件</h2><p>打开atom，<br>file=&gt;setting=&gt;install<br>在选项卡中输入activate-power-mode<br>在插件列表中选择当前插件，然后安装即可</p>\n<h2 id=\"tips\"><a href=\"#tips\" class=\"headerlink\" title=\"tips\"></a>tips</h2><p>查看当前系统环境，因为这个插件是使用C++写的，因此需要一些特殊的环境。可以使用<code>apm -version</code>来查看<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">C:\\Users\\jinge\\.atom\\packages&gt;apm -version</div><div class=\"line\">apm  1.12.9</div><div class=\"line\">npm  3.10.5</div><div class=\"line\">node 4.4.5</div><div class=\"line\">python</div><div class=\"line\">git 2.11.0.windows.1</div><div class=\"line\">visual studio</div></pre></td></tr></table></figure></p>\n","excerpt":"","more":"<p>从开始接触编程，就接触到了各种IDE，上学时写java用eclipse到实习用的myeclipse。这些都是后台使用的IDE，虽然也可以用来编写前端页面，但对于前端不友好。专注于前端的IDE，我刚开始就只知道Dreamwear,以为它自带提示功能太强大了。一段时间后看到了webstrom，赶脚DW弱爆了，界面丑就算啦，装插件还各种麻烦，马上投入Webstorm的怀抱。好景不长，使用Webstorm一段时间后，我发现WS及其耗内存，打开几个项目8G的内存就已经爆满啦再加上photoshop更是雪上加霜。sublimetext和atom出现在我眼前，因为sublimetext是收费的，而atom是免费哒，果断选atom。最近看到atom有一个非常绚丽的效果，但是安装过程中出现了各种问题，记录一下。</p>\n<h2 id=\"1-github下载包安装\"><a href=\"#1-github下载包安装\" class=\"headerlink\" title=\"1 github下载包安装\"></a>1 github下载包安装</h2><p>首先当然是安装atom啦，安装完成后，在atom的用户目录下，找到<code>.atom</code>文件夹，注意不是atom的安装目录。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">C:\\Users\\jinge\\.atom\\packages</div></pre></td></tr></table></figure></p>\n<p>用git克隆下插件的包<br>包的地址<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">https://github.com/JoelBesada/activate-power-mode.git</div></pre></td></tr></table></figure></p>\n<p>克隆完成后，进入到插件的目录下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd C:\\Users\\jinge\\.atom\\packages\\activate-power-mode</div></pre></td></tr></table></figure></p>\n<p>然后输入<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">apm install</div></pre></td></tr></table></figure></p>\n<p>如果提示没有apm这个命令，就需要在系统环境变量中添加。<br>如果看到<code>Install modules done</code>,就说明安装成功啦<br>运行atom,如果没有效果，可以使用快捷键<code>Ctrl+Alt+o</code></p>\n<h2 id=\"2-在atom中安装插件\"><a href=\"#2-在atom中安装插件\" class=\"headerlink\" title=\"2 在atom中安装插件\"></a>2 在atom中安装插件</h2><p>打开atom，<br>file=&gt;setting=&gt;install<br>在选项卡中输入activate-power-mode<br>在插件列表中选择当前插件，然后安装即可</p>\n<h2 id=\"tips\"><a href=\"#tips\" class=\"headerlink\" title=\"tips\"></a>tips</h2><p>查看当前系统环境，因为这个插件是使用C++写的，因此需要一些特殊的环境。可以使用<code>apm -version</code>来查看<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">C:\\Users\\jinge\\.atom\\packages&gt;apm -version</div><div class=\"line\">apm  1.12.9</div><div class=\"line\">npm  3.10.5</div><div class=\"line\">node 4.4.5</div><div class=\"line\">python</div><div class=\"line\">git 2.11.0.windows.1</div><div class=\"line\">visual studio</div></pre></td></tr></table></figure></p>\n"},{"title":"CarouselFigure","date":"2016-12-26T13:34:58.000Z","_content":"轮播图是前端页面中最常用的组件，尤其在广告页和首页中。虽然有各种各样的框架可以实现这个功能，但引入框架会使得代码不干净（强迫症。。。），还会带来一些问题，比如代码体积变大，不必要的请求等等。所以偷个懒，写个轮播Demo,可以重复利用。\n\n```html\n<div>\n    <ul class=\"carousel-body\">\n    \t<!--一共有14张图片，为了无限轮播，在第一张前加上最后一张。同理在最后一张后加上第一张-->\n        <li>\n            <img src=\"images/partA/part1a_03.jpg\" alt=\"\">\n            <p>距离墨尔本皇家植物公园约2公里，该植物园是当今世界上设计最好的植物园之一</p>\n        </li>\n        <li>\n            <img src=\"images/partA/parta14_03.jpg\" alt=\"\">\n            <p>高档公寓与奢侈品店的综合体，两栋地标建筑完美展现出建筑的几何之美。</p>\n        </li>\n        <li>\n            <img src=\"images/partA/parta13_03.jpg\" alt=\"\">\n            <p>Capitol Grand是墨尔本首个六星级住宅项目，坐落于墨尔本著名富人区南雅拉中心地段。</p>\n        </li>\n        <li>\n            <img src=\"images/partA/parta12_03.jpg\" alt=\"\">\n            <p>底层规划为三个楼层的奢侈品零售区，零售区以上的楼层将设一组高端公寓套房</p>\n        </li>\n        <li>\n            <img src=\"images/partA/parta11_03.jpg\" alt=\"\">\n            <p>园区内设有宜人的绿化景观园林，打开窗户，园区的景观便一览无余</p>\n        </li>\n        <li>\n            <img src=\"images/partA/parta10_03.jpg\" alt=\"\">\n            <p>顶层私人会所拥有绝美海湾景致的无边界泳池，俯抱墨尔本令人难以置信的魅力风景</p>\n        </li>\n        <li>\n            <img src=\"images/partA/parta9_03.jpg\" alt=\"\">\n            <p>大厦内的公寓套房将采用精致的设计，安装落地窗，拥有宽敞明亮的空间和华丽的饰面</p>\n        </li>\n        <li>\n            <img src=\"images/partA/parta8_03.jpg\" alt=\"\">\n            <p>所有公寓套房均采用优质材料进行装修，装配欧式设备、高端厨具电器</p>\n        </li>\n        <li>\n            <img src=\"images/partA/parta7_03.jpg\" alt=\"\">\n            <p>3层时尚购物中心上盖有豪华住宅单位，格局方正、大气，尽显奢华生活</p>\n        </li>\n        <li>\n            <img src=\"images/partA/parta6_03.jpg\" alt=\"\">\n            <p>大楼将设有带先进设施的健身馆，让业主享受到大楼所提供的贴心服务</p>\n        </li>\n        <li>\n            <img src=\"images/partA/parta5_03.jpg\" alt=\"\">\n            <p>公寓套房内大面积的落地窗设计，让房间的每个角落都充满阳光</p>\n        </li>\n        <li>\n            <img src=\"images/partA/parta4_03.jpg\" alt=\"\">\n            <p>南雅拉提供奢华、便捷的生活，设有电车、火车和巴士服务，还有多所名校和漂亮的公园</p>\n        </li>\n        <li>\n            <img src=\"images/partA/parta3_03.jpg\" alt=\"\">\n            <p>Toorak路上的8号电车，可直达墨尔本大学、途径St Kilda路商业区和墨尔本CBD</p>\n        </li>\n        <li>\n            <img src=\"images/partA/parta2_03.jpg\" alt=\"\">\n            <p>距离雅拉河只有8分钟的路程，闲暇之余，可以和家人一起惬意的漫步雅拉河畔</p>\n        </li>\n        <li>\n            <img src=\"images/partA/part1a_03.jpg\" alt=\"\">\n            <p>距离墨尔本皇家植物公园约2公里，该植物园是当今世界上设计最好的植物园之一</p>\n        </li>\n        <li>\n            <img src=\"images/partA/parta14_03.jpg\" alt=\"\">\n            <p>高档公寓与奢侈品店的综合体，两栋地标建筑完美展现出建筑的几何之美。</p>\n        </li>\n    </ul>\n    <div class=\"prew-button\">&lt;</div>\n    <div class=\"ctrls\">\n        <span class=\"active\"></span>\n        <span></span>\n        <span></span>\n        <span></span>\n        <span></span>\n        <span></span>\n        <span></span>\n        <span></span>\n        <span></span>\n        <span></span>\n        <span></span>\n        <span></span>\n        <span></span>\n        <span></span>\n    </div>\n    <div class=\"next-button\">&gt;</div>\n</div>\n```\n以上为html代码\n\n```css\n\n.part-style .center > div {\n  position: relative;\n  width: 980px;\n  height: 500px;\n  overflow: hidden;\n}\n.carousel-body {\n  position: absolute;\n  height: 500px;\n  width: 15680px;\n  left: -980px;\n}\n.carousel-body li {\n  float: left;\n  position: relative;\n}\n.carousel-body li img {\n  vertical-align: bottom;\n}\n.carousel-body li p {\n  width: 980px;\n  background: rgba(0, 0, 0, 0.5);\n  height: 34px;\n  line-height: 34px;\n  font-size: 16px;\n  font-family: \"冬青黑体简体中文 W3\", \"黑体\";\n  color: #fff;\n  position: absolute;\n  bottom: 0px;\n  left: 0px;\n}\n.ctrls {\n  width: 980px;\n  text-align: center;\n  position: absolute;\n  bottom: 45px;\n}\n.ctrls span {\n  display: inline-block;\n  width: 10px;\n  height: 10px;\n  border-radius: 5px;\n  background: #FFFFFF;\n  margin: 0 6px;\n}\n.ctrls span.active {\n  background: #363636;\n}\n.prew-button,\n.next-button {\n  background: #996636;\n  position: absolute;\n  width: 24px;\n  height: 24px;\n  border-radius: 12px;\n  color: #fff;\n  line-height: 24px;\n  text-align: center;\n  font-family: \"冬青黑体简体中文 W3\", \"黑体\";\n  font-weight: normal;\n  bottom: 42px;\n}\n.prew-button {\n  left: 284px;\n  z-index: 10;\n  cursor: pointer;\n}\n.next-button {\n  right: 286px;\n  z-index: 10;\n  cursor: pointer;\n}\n```\n\n以上为css代码\n\n```javascript\n//方法主体\n$(function(){\n    var $content = $('.carousel-body');\n    var $ctrl=$('.ctrls span');\n    var index = 1;\n    var timmer = null;\n    var pass = false;\n    var start = function(){\n        clearInterval(timmer);\n        timmer=setInterval(function(){\n            if(!pass){\n                index++;\n                if(index>14){\n                    index=1;\n                    $content.css(\"left\",\"0px\");\n                    $content.animate({\"left\":-980+\"px\"},500);\n                }else{\n                    $content.animate({\"left\":-980*index+\"px\"},500);\n                }\n                $ctrl.removeClass(\"active\");\n                $ctrl[index-1].className=\"active\";\n            }else{\n                pass=false;\n            }\n        },1000)\n    }\n    start();\n    $content.on(\"mouseover\",function(){\n        clearInterval(timmer);\n    })\n    $content.on(\"mouseout\",function(){\n        start();\n    })\n    $('.ctrls span').click(function(){\n        index=$(this).index() + 1;\n        update();\n    });\n    $('.prew-button').click(function(){\n        index--;\n        if(index<=0) {\n            index = 14;\n            $content.css(\"left\", -980 * 15 + \"px\");\n        }\n        update();\n    })\n    $('.next-button').click(function(){\n        index++;\n        if(index>14) {\n            index = 1;\n            $content.css(\"left\", -980 * 0 + \"px\");\n        }\n        update();\n    })\n    function update(){\n        pass=true;\n        clearInterval(timmer);\n        $ctrl.removeClass(\"active\");\n        $ctrl[index-1].className=\"active\";\n        $content.animate({\"left\":-980*index+\"px\"},{ duration: 500, queue: false, complete: function() {start();} })\n    }\n});\n```\n以上为javascript代码\n\n当然在同一个页面中可以不只有一个轮播，所以有必要把他封装成一个方法，然后传入一个对象，调用执行。\n```javascript\nvar carouse=function(item){\n    var $content = item.$content;\n    var $ctrl = item.$ctrl;\n    var $ctrlsspan = item.$ctrlsspan;\n    var $prew = item.$prew;\n    var $next = item.$next;\n    var index = 1;\n    var pages = item.pages;\n    var time = item.time;\n    var timmer = null;\n    var pass = false;\n    var start = function(){\n        clearInterval(timmer);\n        timmer=setInterval(function(){\n            if(!pass){\n                index++;\n                if(index>pages){\n                    index=1;\n                    $content.css(\"left\",\"0px\");\n                    $content.animate({\"left\":-980+\"px\"},500);\n                }else{\n                    $content.animate({\"left\":-980*index+\"px\"},500);\n                }\n                $ctrl.removeClass(\"active\");\n                $ctrl[index-1].className=\"active\";\n            }else{\n                pass=false;\n            }\n        },time)\n    }\n    start();\n    $content.on(\"mouseover\",function(){\n        clearInterval(timmer);\n    })\n    $content.on(\"mouseout\",function(){\n        start();\n    })\n    $ctrlsspan.click(function(){\n        index=$(this).index() + 1;\n        update();\n    });\n    $prew.click(function(){\n        index--;\n        if(index<=0) {\n            index = pages;\n            $content.css(\"left\", -980 * (pages+1) + \"px\");\n        }\n        update();\n    })\n    $next.click(function(){\n        index++;\n        if(index>pages) {\n            index = 1;\n            $content.css(\"left\", -980 * 0 + \"px\");\n        }\n        update();\n    })\n    var update = function(){\n        pass=true;\n        clearInterval(timmer);\n        $ctrl.removeClass(\"active\");\n        $ctrl[index-1].className=\"active\";\n        $content.animate({\"left\":-980*index+\"px\"},{ duration: 500, queue: false, complete: function() {start();} })\n    }\n}\n//传入的对象\nvar ALL={\n    $content : $('#ALL .carousel-body'),\n    $ctrl : $('#ALL .ctrls span'),\n    $ctrlsspan : $('#ALL .ctrls span'),\n    $prew : $('#ALL .prew-button'),\n    $next : $('#ALL .next-button'),\n    pages : 7,\n    time : 1000\n}\ncarouse(ALL);\n```\n\n\n封装成JQuery插件\n","source":"_posts/carouselFigure.md","raw":"---\ntitle: CarouselFigure\ndate: 2016-12-26 21:34:58\ntags: 无限轮播图Demo\n---\n轮播图是前端页面中最常用的组件，尤其在广告页和首页中。虽然有各种各样的框架可以实现这个功能，但引入框架会使得代码不干净（强迫症。。。），还会带来一些问题，比如代码体积变大，不必要的请求等等。所以偷个懒，写个轮播Demo,可以重复利用。\n\n```html\n<div>\n    <ul class=\"carousel-body\">\n    \t<!--一共有14张图片，为了无限轮播，在第一张前加上最后一张。同理在最后一张后加上第一张-->\n        <li>\n            <img src=\"images/partA/part1a_03.jpg\" alt=\"\">\n            <p>距离墨尔本皇家植物公园约2公里，该植物园是当今世界上设计最好的植物园之一</p>\n        </li>\n        <li>\n            <img src=\"images/partA/parta14_03.jpg\" alt=\"\">\n            <p>高档公寓与奢侈品店的综合体，两栋地标建筑完美展现出建筑的几何之美。</p>\n        </li>\n        <li>\n            <img src=\"images/partA/parta13_03.jpg\" alt=\"\">\n            <p>Capitol Grand是墨尔本首个六星级住宅项目，坐落于墨尔本著名富人区南雅拉中心地段。</p>\n        </li>\n        <li>\n            <img src=\"images/partA/parta12_03.jpg\" alt=\"\">\n            <p>底层规划为三个楼层的奢侈品零售区，零售区以上的楼层将设一组高端公寓套房</p>\n        </li>\n        <li>\n            <img src=\"images/partA/parta11_03.jpg\" alt=\"\">\n            <p>园区内设有宜人的绿化景观园林，打开窗户，园区的景观便一览无余</p>\n        </li>\n        <li>\n            <img src=\"images/partA/parta10_03.jpg\" alt=\"\">\n            <p>顶层私人会所拥有绝美海湾景致的无边界泳池，俯抱墨尔本令人难以置信的魅力风景</p>\n        </li>\n        <li>\n            <img src=\"images/partA/parta9_03.jpg\" alt=\"\">\n            <p>大厦内的公寓套房将采用精致的设计，安装落地窗，拥有宽敞明亮的空间和华丽的饰面</p>\n        </li>\n        <li>\n            <img src=\"images/partA/parta8_03.jpg\" alt=\"\">\n            <p>所有公寓套房均采用优质材料进行装修，装配欧式设备、高端厨具电器</p>\n        </li>\n        <li>\n            <img src=\"images/partA/parta7_03.jpg\" alt=\"\">\n            <p>3层时尚购物中心上盖有豪华住宅单位，格局方正、大气，尽显奢华生活</p>\n        </li>\n        <li>\n            <img src=\"images/partA/parta6_03.jpg\" alt=\"\">\n            <p>大楼将设有带先进设施的健身馆，让业主享受到大楼所提供的贴心服务</p>\n        </li>\n        <li>\n            <img src=\"images/partA/parta5_03.jpg\" alt=\"\">\n            <p>公寓套房内大面积的落地窗设计，让房间的每个角落都充满阳光</p>\n        </li>\n        <li>\n            <img src=\"images/partA/parta4_03.jpg\" alt=\"\">\n            <p>南雅拉提供奢华、便捷的生活，设有电车、火车和巴士服务，还有多所名校和漂亮的公园</p>\n        </li>\n        <li>\n            <img src=\"images/partA/parta3_03.jpg\" alt=\"\">\n            <p>Toorak路上的8号电车，可直达墨尔本大学、途径St Kilda路商业区和墨尔本CBD</p>\n        </li>\n        <li>\n            <img src=\"images/partA/parta2_03.jpg\" alt=\"\">\n            <p>距离雅拉河只有8分钟的路程，闲暇之余，可以和家人一起惬意的漫步雅拉河畔</p>\n        </li>\n        <li>\n            <img src=\"images/partA/part1a_03.jpg\" alt=\"\">\n            <p>距离墨尔本皇家植物公园约2公里，该植物园是当今世界上设计最好的植物园之一</p>\n        </li>\n        <li>\n            <img src=\"images/partA/parta14_03.jpg\" alt=\"\">\n            <p>高档公寓与奢侈品店的综合体，两栋地标建筑完美展现出建筑的几何之美。</p>\n        </li>\n    </ul>\n    <div class=\"prew-button\">&lt;</div>\n    <div class=\"ctrls\">\n        <span class=\"active\"></span>\n        <span></span>\n        <span></span>\n        <span></span>\n        <span></span>\n        <span></span>\n        <span></span>\n        <span></span>\n        <span></span>\n        <span></span>\n        <span></span>\n        <span></span>\n        <span></span>\n        <span></span>\n    </div>\n    <div class=\"next-button\">&gt;</div>\n</div>\n```\n以上为html代码\n\n```css\n\n.part-style .center > div {\n  position: relative;\n  width: 980px;\n  height: 500px;\n  overflow: hidden;\n}\n.carousel-body {\n  position: absolute;\n  height: 500px;\n  width: 15680px;\n  left: -980px;\n}\n.carousel-body li {\n  float: left;\n  position: relative;\n}\n.carousel-body li img {\n  vertical-align: bottom;\n}\n.carousel-body li p {\n  width: 980px;\n  background: rgba(0, 0, 0, 0.5);\n  height: 34px;\n  line-height: 34px;\n  font-size: 16px;\n  font-family: \"冬青黑体简体中文 W3\", \"黑体\";\n  color: #fff;\n  position: absolute;\n  bottom: 0px;\n  left: 0px;\n}\n.ctrls {\n  width: 980px;\n  text-align: center;\n  position: absolute;\n  bottom: 45px;\n}\n.ctrls span {\n  display: inline-block;\n  width: 10px;\n  height: 10px;\n  border-radius: 5px;\n  background: #FFFFFF;\n  margin: 0 6px;\n}\n.ctrls span.active {\n  background: #363636;\n}\n.prew-button,\n.next-button {\n  background: #996636;\n  position: absolute;\n  width: 24px;\n  height: 24px;\n  border-radius: 12px;\n  color: #fff;\n  line-height: 24px;\n  text-align: center;\n  font-family: \"冬青黑体简体中文 W3\", \"黑体\";\n  font-weight: normal;\n  bottom: 42px;\n}\n.prew-button {\n  left: 284px;\n  z-index: 10;\n  cursor: pointer;\n}\n.next-button {\n  right: 286px;\n  z-index: 10;\n  cursor: pointer;\n}\n```\n\n以上为css代码\n\n```javascript\n//方法主体\n$(function(){\n    var $content = $('.carousel-body');\n    var $ctrl=$('.ctrls span');\n    var index = 1;\n    var timmer = null;\n    var pass = false;\n    var start = function(){\n        clearInterval(timmer);\n        timmer=setInterval(function(){\n            if(!pass){\n                index++;\n                if(index>14){\n                    index=1;\n                    $content.css(\"left\",\"0px\");\n                    $content.animate({\"left\":-980+\"px\"},500);\n                }else{\n                    $content.animate({\"left\":-980*index+\"px\"},500);\n                }\n                $ctrl.removeClass(\"active\");\n                $ctrl[index-1].className=\"active\";\n            }else{\n                pass=false;\n            }\n        },1000)\n    }\n    start();\n    $content.on(\"mouseover\",function(){\n        clearInterval(timmer);\n    })\n    $content.on(\"mouseout\",function(){\n        start();\n    })\n    $('.ctrls span').click(function(){\n        index=$(this).index() + 1;\n        update();\n    });\n    $('.prew-button').click(function(){\n        index--;\n        if(index<=0) {\n            index = 14;\n            $content.css(\"left\", -980 * 15 + \"px\");\n        }\n        update();\n    })\n    $('.next-button').click(function(){\n        index++;\n        if(index>14) {\n            index = 1;\n            $content.css(\"left\", -980 * 0 + \"px\");\n        }\n        update();\n    })\n    function update(){\n        pass=true;\n        clearInterval(timmer);\n        $ctrl.removeClass(\"active\");\n        $ctrl[index-1].className=\"active\";\n        $content.animate({\"left\":-980*index+\"px\"},{ duration: 500, queue: false, complete: function() {start();} })\n    }\n});\n```\n以上为javascript代码\n\n当然在同一个页面中可以不只有一个轮播，所以有必要把他封装成一个方法，然后传入一个对象，调用执行。\n```javascript\nvar carouse=function(item){\n    var $content = item.$content;\n    var $ctrl = item.$ctrl;\n    var $ctrlsspan = item.$ctrlsspan;\n    var $prew = item.$prew;\n    var $next = item.$next;\n    var index = 1;\n    var pages = item.pages;\n    var time = item.time;\n    var timmer = null;\n    var pass = false;\n    var start = function(){\n        clearInterval(timmer);\n        timmer=setInterval(function(){\n            if(!pass){\n                index++;\n                if(index>pages){\n                    index=1;\n                    $content.css(\"left\",\"0px\");\n                    $content.animate({\"left\":-980+\"px\"},500);\n                }else{\n                    $content.animate({\"left\":-980*index+\"px\"},500);\n                }\n                $ctrl.removeClass(\"active\");\n                $ctrl[index-1].className=\"active\";\n            }else{\n                pass=false;\n            }\n        },time)\n    }\n    start();\n    $content.on(\"mouseover\",function(){\n        clearInterval(timmer);\n    })\n    $content.on(\"mouseout\",function(){\n        start();\n    })\n    $ctrlsspan.click(function(){\n        index=$(this).index() + 1;\n        update();\n    });\n    $prew.click(function(){\n        index--;\n        if(index<=0) {\n            index = pages;\n            $content.css(\"left\", -980 * (pages+1) + \"px\");\n        }\n        update();\n    })\n    $next.click(function(){\n        index++;\n        if(index>pages) {\n            index = 1;\n            $content.css(\"left\", -980 * 0 + \"px\");\n        }\n        update();\n    })\n    var update = function(){\n        pass=true;\n        clearInterval(timmer);\n        $ctrl.removeClass(\"active\");\n        $ctrl[index-1].className=\"active\";\n        $content.animate({\"left\":-980*index+\"px\"},{ duration: 500, queue: false, complete: function() {start();} })\n    }\n}\n//传入的对象\nvar ALL={\n    $content : $('#ALL .carousel-body'),\n    $ctrl : $('#ALL .ctrls span'),\n    $ctrlsspan : $('#ALL .ctrls span'),\n    $prew : $('#ALL .prew-button'),\n    $next : $('#ALL .next-button'),\n    pages : 7,\n    time : 1000\n}\ncarouse(ALL);\n```\n\n\n封装成JQuery插件\n","slug":"carouselFigure","published":1,"updated":"2017-01-16T13:32:30.288Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizfkde3h00054cw5xzf5lx3b","content":"<p>轮播图是前端页面中最常用的组件，尤其在广告页和首页中。虽然有各种各样的框架可以实现这个功能，但引入框架会使得代码不干净（强迫症。。。），还会带来一些问题，比如代码体积变大，不必要的请求等等。所以偷个懒，写个轮播Demo,可以重复利用。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">\"carousel-body\"</span>&gt;</span></div><div class=\"line\">    \t<span class=\"comment\">&lt;!--一共有14张图片，为了无限轮播，在第一张前加上最后一张。同理在最后一张后加上第一张--&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"images/partA/part1a_03.jpg\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>距离墨尔本皇家植物公园约2公里，该植物园是当今世界上设计最好的植物园之一<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"images/partA/parta14_03.jpg\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>高档公寓与奢侈品店的综合体，两栋地标建筑完美展现出建筑的几何之美。<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"images/partA/parta13_03.jpg\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Capitol Grand是墨尔本首个六星级住宅项目，坐落于墨尔本著名富人区南雅拉中心地段。<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"images/partA/parta12_03.jpg\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>底层规划为三个楼层的奢侈品零售区，零售区以上的楼层将设一组高端公寓套房<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"images/partA/parta11_03.jpg\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>园区内设有宜人的绿化景观园林，打开窗户，园区的景观便一览无余<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"images/partA/parta10_03.jpg\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>顶层私人会所拥有绝美海湾景致的无边界泳池，俯抱墨尔本令人难以置信的魅力风景<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"images/partA/parta9_03.jpg\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>大厦内的公寓套房将采用精致的设计，安装落地窗，拥有宽敞明亮的空间和华丽的饰面<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"images/partA/parta8_03.jpg\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>所有公寓套房均采用优质材料进行装修，装配欧式设备、高端厨具电器<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"images/partA/parta7_03.jpg\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>3层时尚购物中心上盖有豪华住宅单位，格局方正、大气，尽显奢华生活<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"images/partA/parta6_03.jpg\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>大楼将设有带先进设施的健身馆，让业主享受到大楼所提供的贴心服务<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"images/partA/parta5_03.jpg\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>公寓套房内大面积的落地窗设计，让房间的每个角落都充满阳光<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"images/partA/parta4_03.jpg\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>南雅拉提供奢华、便捷的生活，设有电车、火车和巴士服务，还有多所名校和漂亮的公园<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"images/partA/parta3_03.jpg\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Toorak路上的8号电车，可直达墨尔本大学、途径St Kilda路商业区和墨尔本CBD<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"images/partA/parta2_03.jpg\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>距离雅拉河只有8分钟的路程，闲暇之余，可以和家人一起惬意的漫步雅拉河畔<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"images/partA/part1a_03.jpg\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>距离墨尔本皇家植物公园约2公里，该植物园是当今世界上设计最好的植物园之一<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"images/partA/parta14_03.jpg\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>高档公寓与奢侈品店的综合体，两栋地标建筑完美展现出建筑的几何之美。<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"prew-button\"</span>&gt;</span>&amp;lt;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ctrls\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"active\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"next-button\"</span>&gt;</span>&amp;gt;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>以上为html代码</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"selector-class\">.part-style</span> <span class=\"selector-class\">.center</span> &gt; <span class=\"selector-tag\">div</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">position</span>: relative;</div><div class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">980px</span>;</div><div class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">500px</span>;</div><div class=\"line\">  <span class=\"attribute\">overflow</span>: hidden;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.carousel-body</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">position</span>: absolute;</div><div class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">500px</span>;</div><div class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">15680px</span>;</div><div class=\"line\">  <span class=\"attribute\">left</span>: -<span class=\"number\">980px</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.carousel-body</span> <span class=\"selector-tag\">li</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">float</span>: left;</div><div class=\"line\">  <span class=\"attribute\">position</span>: relative;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.carousel-body</span> <span class=\"selector-tag\">li</span> <span class=\"selector-tag\">img</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">vertical-align</span>: bottom;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.carousel-body</span> <span class=\"selector-tag\">li</span> <span class=\"selector-tag\">p</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">980px</span>;</div><div class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"built_in\">rgba</span>(0, 0, 0, 0.5);</div><div class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">34px</span>;</div><div class=\"line\">  <span class=\"attribute\">line-height</span>: <span class=\"number\">34px</span>;</div><div class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">16px</span>;</div><div class=\"line\">  <span class=\"attribute\">font-family</span>: <span class=\"string\">\"冬青黑体简体中文 W3\"</span>, <span class=\"string\">\"黑体\"</span>;</div><div class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</div><div class=\"line\">  <span class=\"attribute\">position</span>: absolute;</div><div class=\"line\">  <span class=\"attribute\">bottom</span>: <span class=\"number\">0px</span>;</div><div class=\"line\">  <span class=\"attribute\">left</span>: <span class=\"number\">0px</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.ctrls</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">980px</span>;</div><div class=\"line\">  <span class=\"attribute\">text-align</span>: center;</div><div class=\"line\">  <span class=\"attribute\">position</span>: absolute;</div><div class=\"line\">  <span class=\"attribute\">bottom</span>: <span class=\"number\">45px</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.ctrls</span> <span class=\"selector-tag\">span</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">display</span>: inline-block;</div><div class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">10px</span>;</div><div class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">10px</span>;</div><div class=\"line\">  <span class=\"attribute\">border-radius</span>: <span class=\"number\">5px</span>;</div><div class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"number\">#FFFFFF</span>;</div><div class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">0</span> <span class=\"number\">6px</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.ctrls</span> <span class=\"selector-tag\">span</span><span class=\"selector-class\">.active</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"number\">#363636</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.prew-button</span>,</div><div class=\"line\"><span class=\"selector-class\">.next-button</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"number\">#996636</span>;</div><div class=\"line\">  <span class=\"attribute\">position</span>: absolute;</div><div class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">24px</span>;</div><div class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">24px</span>;</div><div class=\"line\">  <span class=\"attribute\">border-radius</span>: <span class=\"number\">12px</span>;</div><div class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</div><div class=\"line\">  <span class=\"attribute\">line-height</span>: <span class=\"number\">24px</span>;</div><div class=\"line\">  <span class=\"attribute\">text-align</span>: center;</div><div class=\"line\">  <span class=\"attribute\">font-family</span>: <span class=\"string\">\"冬青黑体简体中文 W3\"</span>, <span class=\"string\">\"黑体\"</span>;</div><div class=\"line\">  <span class=\"attribute\">font-weight</span>: normal;</div><div class=\"line\">  <span class=\"attribute\">bottom</span>: <span class=\"number\">42px</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.prew-button</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">left</span>: <span class=\"number\">284px</span>;</div><div class=\"line\">  <span class=\"attribute\">z-index</span>: <span class=\"number\">10</span>;</div><div class=\"line\">  <span class=\"attribute\">cursor</span>: pointer;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.next-button</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">right</span>: <span class=\"number\">286px</span>;</div><div class=\"line\">  <span class=\"attribute\">z-index</span>: <span class=\"number\">10</span>;</div><div class=\"line\">  <span class=\"attribute\">cursor</span>: pointer;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>以上为css代码</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//方法主体</span></div><div class=\"line\">$(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> $content = $(<span class=\"string\">'.carousel-body'</span>);</div><div class=\"line\">    <span class=\"keyword\">var</span> $ctrl=$(<span class=\"string\">'.ctrls span'</span>);</div><div class=\"line\">    <span class=\"keyword\">var</span> index = <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">var</span> timmer = <span class=\"literal\">null</span>;</div><div class=\"line\">    <span class=\"keyword\">var</span> pass = <span class=\"literal\">false</span>;</div><div class=\"line\">    <span class=\"keyword\">var</span> start = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        clearInterval(timmer);</div><div class=\"line\">        timmer=setInterval(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span>(!pass)&#123;</div><div class=\"line\">                index++;</div><div class=\"line\">                <span class=\"keyword\">if</span>(index&gt;<span class=\"number\">14</span>)&#123;</div><div class=\"line\">                    index=<span class=\"number\">1</span>;</div><div class=\"line\">                    $content.css(<span class=\"string\">\"left\"</span>,<span class=\"string\">\"0px\"</span>);</div><div class=\"line\">                    $content.animate(&#123;<span class=\"string\">\"left\"</span>:<span class=\"number\">-980</span>+<span class=\"string\">\"px\"</span>&#125;,<span class=\"number\">500</span>);</div><div class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">                    $content.animate(&#123;<span class=\"string\">\"left\"</span>:<span class=\"number\">-980</span>*index+<span class=\"string\">\"px\"</span>&#125;,<span class=\"number\">500</span>);</div><div class=\"line\">                &#125;</div><div class=\"line\">                $ctrl.removeClass(<span class=\"string\">\"active\"</span>);</div><div class=\"line\">                $ctrl[index<span class=\"number\">-1</span>].className=<span class=\"string\">\"active\"</span>;</div><div class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">                pass=<span class=\"literal\">false</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;,<span class=\"number\">1000</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">    start();</div><div class=\"line\">    $content.on(<span class=\"string\">\"mouseover\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        clearInterval(timmer);</div><div class=\"line\">    &#125;)</div><div class=\"line\">    $content.on(<span class=\"string\">\"mouseout\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        start();</div><div class=\"line\">    &#125;)</div><div class=\"line\">    $(<span class=\"string\">'.ctrls span'</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        index=$(<span class=\"keyword\">this</span>).index() + <span class=\"number\">1</span>;</div><div class=\"line\">        update();</div><div class=\"line\">    &#125;);</div><div class=\"line\">    $(<span class=\"string\">'.prew-button'</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        index--;</div><div class=\"line\">        <span class=\"keyword\">if</span>(index&lt;=<span class=\"number\">0</span>) &#123;</div><div class=\"line\">            index = <span class=\"number\">14</span>;</div><div class=\"line\">            $content.css(<span class=\"string\">\"left\"</span>, <span class=\"number\">-980</span> * <span class=\"number\">15</span> + <span class=\"string\">\"px\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        update();</div><div class=\"line\">    &#125;)</div><div class=\"line\">    $(<span class=\"string\">'.next-button'</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        index++;</div><div class=\"line\">        <span class=\"keyword\">if</span>(index&gt;<span class=\"number\">14</span>) &#123;</div><div class=\"line\">            index = <span class=\"number\">1</span>;</div><div class=\"line\">            $content.css(<span class=\"string\">\"left\"</span>, <span class=\"number\">-980</span> * <span class=\"number\">0</span> + <span class=\"string\">\"px\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        update();</div><div class=\"line\">    &#125;)</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">update</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        pass=<span class=\"literal\">true</span>;</div><div class=\"line\">        clearInterval(timmer);</div><div class=\"line\">        $ctrl.removeClass(<span class=\"string\">\"active\"</span>);</div><div class=\"line\">        $ctrl[index<span class=\"number\">-1</span>].className=<span class=\"string\">\"active\"</span>;</div><div class=\"line\">        $content.animate(&#123;<span class=\"string\">\"left\"</span>:<span class=\"number\">-980</span>*index+<span class=\"string\">\"px\"</span>&#125;,&#123; <span class=\"attr\">duration</span>: <span class=\"number\">500</span>, <span class=\"attr\">queue</span>: <span class=\"literal\">false</span>, <span class=\"attr\">complete</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;start();&#125; &#125;)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>以上为javascript代码</p>\n<p>当然在同一个页面中可以不只有一个轮播，所以有必要把他封装成一个方法，然后传入一个对象，调用执行。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> carouse=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> $content = item.$content;</div><div class=\"line\">    <span class=\"keyword\">var</span> $ctrl = item.$ctrl;</div><div class=\"line\">    <span class=\"keyword\">var</span> $ctrlsspan = item.$ctrlsspan;</div><div class=\"line\">    <span class=\"keyword\">var</span> $prew = item.$prew;</div><div class=\"line\">    <span class=\"keyword\">var</span> $next = item.$next;</div><div class=\"line\">    <span class=\"keyword\">var</span> index = <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">var</span> pages = item.pages;</div><div class=\"line\">    <span class=\"keyword\">var</span> time = item.time;</div><div class=\"line\">    <span class=\"keyword\">var</span> timmer = <span class=\"literal\">null</span>;</div><div class=\"line\">    <span class=\"keyword\">var</span> pass = <span class=\"literal\">false</span>;</div><div class=\"line\">    <span class=\"keyword\">var</span> start = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        clearInterval(timmer);</div><div class=\"line\">        timmer=setInterval(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span>(!pass)&#123;</div><div class=\"line\">                index++;</div><div class=\"line\">                <span class=\"keyword\">if</span>(index&gt;pages)&#123;</div><div class=\"line\">                    index=<span class=\"number\">1</span>;</div><div class=\"line\">                    $content.css(<span class=\"string\">\"left\"</span>,<span class=\"string\">\"0px\"</span>);</div><div class=\"line\">                    $content.animate(&#123;<span class=\"string\">\"left\"</span>:<span class=\"number\">-980</span>+<span class=\"string\">\"px\"</span>&#125;,<span class=\"number\">500</span>);</div><div class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">                    $content.animate(&#123;<span class=\"string\">\"left\"</span>:<span class=\"number\">-980</span>*index+<span class=\"string\">\"px\"</span>&#125;,<span class=\"number\">500</span>);</div><div class=\"line\">                &#125;</div><div class=\"line\">                $ctrl.removeClass(<span class=\"string\">\"active\"</span>);</div><div class=\"line\">                $ctrl[index<span class=\"number\">-1</span>].className=<span class=\"string\">\"active\"</span>;</div><div class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">                pass=<span class=\"literal\">false</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;,time)</div><div class=\"line\">    &#125;</div><div class=\"line\">    start();</div><div class=\"line\">    $content.on(<span class=\"string\">\"mouseover\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        clearInterval(timmer);</div><div class=\"line\">    &#125;)</div><div class=\"line\">    $content.on(<span class=\"string\">\"mouseout\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        start();</div><div class=\"line\">    &#125;)</div><div class=\"line\">    $ctrlsspan.click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        index=$(<span class=\"keyword\">this</span>).index() + <span class=\"number\">1</span>;</div><div class=\"line\">        update();</div><div class=\"line\">    &#125;);</div><div class=\"line\">    $prew.click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        index--;</div><div class=\"line\">        <span class=\"keyword\">if</span>(index&lt;=<span class=\"number\">0</span>) &#123;</div><div class=\"line\">            index = pages;</div><div class=\"line\">            $content.css(<span class=\"string\">\"left\"</span>, <span class=\"number\">-980</span> * (pages+<span class=\"number\">1</span>) + <span class=\"string\">\"px\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        update();</div><div class=\"line\">    &#125;)</div><div class=\"line\">    $next.click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        index++;</div><div class=\"line\">        <span class=\"keyword\">if</span>(index&gt;pages) &#123;</div><div class=\"line\">            index = <span class=\"number\">1</span>;</div><div class=\"line\">            $content.css(<span class=\"string\">\"left\"</span>, <span class=\"number\">-980</span> * <span class=\"number\">0</span> + <span class=\"string\">\"px\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        update();</div><div class=\"line\">    &#125;)</div><div class=\"line\">    <span class=\"keyword\">var</span> update = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        pass=<span class=\"literal\">true</span>;</div><div class=\"line\">        clearInterval(timmer);</div><div class=\"line\">        $ctrl.removeClass(<span class=\"string\">\"active\"</span>);</div><div class=\"line\">        $ctrl[index<span class=\"number\">-1</span>].className=<span class=\"string\">\"active\"</span>;</div><div class=\"line\">        $content.animate(&#123;<span class=\"string\">\"left\"</span>:<span class=\"number\">-980</span>*index+<span class=\"string\">\"px\"</span>&#125;,&#123; <span class=\"attr\">duration</span>: <span class=\"number\">500</span>, <span class=\"attr\">queue</span>: <span class=\"literal\">false</span>, <span class=\"attr\">complete</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;start();&#125; &#125;)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//传入的对象</span></div><div class=\"line\"><span class=\"keyword\">var</span> ALL=&#123;</div><div class=\"line\">    <span class=\"attr\">$content</span> : $(<span class=\"string\">'#ALL .carousel-body'</span>),</div><div class=\"line\">    <span class=\"attr\">$ctrl</span> : $(<span class=\"string\">'#ALL .ctrls span'</span>),</div><div class=\"line\">    <span class=\"attr\">$ctrlsspan</span> : $(<span class=\"string\">'#ALL .ctrls span'</span>),</div><div class=\"line\">    <span class=\"attr\">$prew</span> : $(<span class=\"string\">'#ALL .prew-button'</span>),</div><div class=\"line\">    <span class=\"attr\">$next</span> : $(<span class=\"string\">'#ALL .next-button'</span>),</div><div class=\"line\">    <span class=\"attr\">pages</span> : <span class=\"number\">7</span>,</div><div class=\"line\">    <span class=\"attr\">time</span> : <span class=\"number\">1000</span></div><div class=\"line\">&#125;</div><div class=\"line\">carouse(ALL);</div></pre></td></tr></table></figure></p>\n<p>封装成JQuery插件</p>\n","excerpt":"","more":"<p>轮播图是前端页面中最常用的组件，尤其在广告页和首页中。虽然有各种各样的框架可以实现这个功能，但引入框架会使得代码不干净（强迫症。。。），还会带来一些问题，比如代码体积变大，不必要的请求等等。所以偷个懒，写个轮播Demo,可以重复利用。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">\"carousel-body\"</span>&gt;</span></div><div class=\"line\">    \t<span class=\"comment\">&lt;!--一共有14张图片，为了无限轮播，在第一张前加上最后一张。同理在最后一张后加上第一张--&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"images/partA/part1a_03.jpg\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>距离墨尔本皇家植物公园约2公里，该植物园是当今世界上设计最好的植物园之一<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"images/partA/parta14_03.jpg\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>高档公寓与奢侈品店的综合体，两栋地标建筑完美展现出建筑的几何之美。<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"images/partA/parta13_03.jpg\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Capitol Grand是墨尔本首个六星级住宅项目，坐落于墨尔本著名富人区南雅拉中心地段。<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"images/partA/parta12_03.jpg\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>底层规划为三个楼层的奢侈品零售区，零售区以上的楼层将设一组高端公寓套房<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"images/partA/parta11_03.jpg\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>园区内设有宜人的绿化景观园林，打开窗户，园区的景观便一览无余<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"images/partA/parta10_03.jpg\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>顶层私人会所拥有绝美海湾景致的无边界泳池，俯抱墨尔本令人难以置信的魅力风景<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"images/partA/parta9_03.jpg\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>大厦内的公寓套房将采用精致的设计，安装落地窗，拥有宽敞明亮的空间和华丽的饰面<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"images/partA/parta8_03.jpg\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>所有公寓套房均采用优质材料进行装修，装配欧式设备、高端厨具电器<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"images/partA/parta7_03.jpg\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>3层时尚购物中心上盖有豪华住宅单位，格局方正、大气，尽显奢华生活<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"images/partA/parta6_03.jpg\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>大楼将设有带先进设施的健身馆，让业主享受到大楼所提供的贴心服务<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"images/partA/parta5_03.jpg\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>公寓套房内大面积的落地窗设计，让房间的每个角落都充满阳光<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"images/partA/parta4_03.jpg\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>南雅拉提供奢华、便捷的生活，设有电车、火车和巴士服务，还有多所名校和漂亮的公园<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"images/partA/parta3_03.jpg\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Toorak路上的8号电车，可直达墨尔本大学、途径St Kilda路商业区和墨尔本CBD<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"images/partA/parta2_03.jpg\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>距离雅拉河只有8分钟的路程，闲暇之余，可以和家人一起惬意的漫步雅拉河畔<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"images/partA/part1a_03.jpg\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>距离墨尔本皇家植物公园约2公里，该植物园是当今世界上设计最好的植物园之一<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"images/partA/parta14_03.jpg\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>高档公寓与奢侈品店的综合体，两栋地标建筑完美展现出建筑的几何之美。<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"prew-button\"</span>&gt;</span>&amp;lt;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ctrls\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"active\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"next-button\"</span>&gt;</span>&amp;gt;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>以上为html代码</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"selector-class\">.part-style</span> <span class=\"selector-class\">.center</span> &gt; <span class=\"selector-tag\">div</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">position</span>: relative;</div><div class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">980px</span>;</div><div class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">500px</span>;</div><div class=\"line\">  <span class=\"attribute\">overflow</span>: hidden;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.carousel-body</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">position</span>: absolute;</div><div class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">500px</span>;</div><div class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">15680px</span>;</div><div class=\"line\">  <span class=\"attribute\">left</span>: -<span class=\"number\">980px</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.carousel-body</span> <span class=\"selector-tag\">li</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">float</span>: left;</div><div class=\"line\">  <span class=\"attribute\">position</span>: relative;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.carousel-body</span> <span class=\"selector-tag\">li</span> <span class=\"selector-tag\">img</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">vertical-align</span>: bottom;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.carousel-body</span> <span class=\"selector-tag\">li</span> <span class=\"selector-tag\">p</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">980px</span>;</div><div class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"built_in\">rgba</span>(0, 0, 0, 0.5);</div><div class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">34px</span>;</div><div class=\"line\">  <span class=\"attribute\">line-height</span>: <span class=\"number\">34px</span>;</div><div class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">16px</span>;</div><div class=\"line\">  <span class=\"attribute\">font-family</span>: <span class=\"string\">\"冬青黑体简体中文 W3\"</span>, <span class=\"string\">\"黑体\"</span>;</div><div class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</div><div class=\"line\">  <span class=\"attribute\">position</span>: absolute;</div><div class=\"line\">  <span class=\"attribute\">bottom</span>: <span class=\"number\">0px</span>;</div><div class=\"line\">  <span class=\"attribute\">left</span>: <span class=\"number\">0px</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.ctrls</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">980px</span>;</div><div class=\"line\">  <span class=\"attribute\">text-align</span>: center;</div><div class=\"line\">  <span class=\"attribute\">position</span>: absolute;</div><div class=\"line\">  <span class=\"attribute\">bottom</span>: <span class=\"number\">45px</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.ctrls</span> <span class=\"selector-tag\">span</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">display</span>: inline-block;</div><div class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">10px</span>;</div><div class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">10px</span>;</div><div class=\"line\">  <span class=\"attribute\">border-radius</span>: <span class=\"number\">5px</span>;</div><div class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"number\">#FFFFFF</span>;</div><div class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">0</span> <span class=\"number\">6px</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.ctrls</span> <span class=\"selector-tag\">span</span><span class=\"selector-class\">.active</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"number\">#363636</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.prew-button</span>,</div><div class=\"line\"><span class=\"selector-class\">.next-button</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"number\">#996636</span>;</div><div class=\"line\">  <span class=\"attribute\">position</span>: absolute;</div><div class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">24px</span>;</div><div class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">24px</span>;</div><div class=\"line\">  <span class=\"attribute\">border-radius</span>: <span class=\"number\">12px</span>;</div><div class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</div><div class=\"line\">  <span class=\"attribute\">line-height</span>: <span class=\"number\">24px</span>;</div><div class=\"line\">  <span class=\"attribute\">text-align</span>: center;</div><div class=\"line\">  <span class=\"attribute\">font-family</span>: <span class=\"string\">\"冬青黑体简体中文 W3\"</span>, <span class=\"string\">\"黑体\"</span>;</div><div class=\"line\">  <span class=\"attribute\">font-weight</span>: normal;</div><div class=\"line\">  <span class=\"attribute\">bottom</span>: <span class=\"number\">42px</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.prew-button</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">left</span>: <span class=\"number\">284px</span>;</div><div class=\"line\">  <span class=\"attribute\">z-index</span>: <span class=\"number\">10</span>;</div><div class=\"line\">  <span class=\"attribute\">cursor</span>: pointer;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.next-button</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">right</span>: <span class=\"number\">286px</span>;</div><div class=\"line\">  <span class=\"attribute\">z-index</span>: <span class=\"number\">10</span>;</div><div class=\"line\">  <span class=\"attribute\">cursor</span>: pointer;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>以上为css代码</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//方法主体</span></div><div class=\"line\">$(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> $content = $(<span class=\"string\">'.carousel-body'</span>);</div><div class=\"line\">    <span class=\"keyword\">var</span> $ctrl=$(<span class=\"string\">'.ctrls span'</span>);</div><div class=\"line\">    <span class=\"keyword\">var</span> index = <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">var</span> timmer = <span class=\"literal\">null</span>;</div><div class=\"line\">    <span class=\"keyword\">var</span> pass = <span class=\"literal\">false</span>;</div><div class=\"line\">    <span class=\"keyword\">var</span> start = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        clearInterval(timmer);</div><div class=\"line\">        timmer=setInterval(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span>(!pass)&#123;</div><div class=\"line\">                index++;</div><div class=\"line\">                <span class=\"keyword\">if</span>(index&gt;<span class=\"number\">14</span>)&#123;</div><div class=\"line\">                    index=<span class=\"number\">1</span>;</div><div class=\"line\">                    $content.css(<span class=\"string\">\"left\"</span>,<span class=\"string\">\"0px\"</span>);</div><div class=\"line\">                    $content.animate(&#123;<span class=\"string\">\"left\"</span>:<span class=\"number\">-980</span>+<span class=\"string\">\"px\"</span>&#125;,<span class=\"number\">500</span>);</div><div class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">                    $content.animate(&#123;<span class=\"string\">\"left\"</span>:<span class=\"number\">-980</span>*index+<span class=\"string\">\"px\"</span>&#125;,<span class=\"number\">500</span>);</div><div class=\"line\">                &#125;</div><div class=\"line\">                $ctrl.removeClass(<span class=\"string\">\"active\"</span>);</div><div class=\"line\">                $ctrl[index<span class=\"number\">-1</span>].className=<span class=\"string\">\"active\"</span>;</div><div class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">                pass=<span class=\"literal\">false</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;,<span class=\"number\">1000</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">    start();</div><div class=\"line\">    $content.on(<span class=\"string\">\"mouseover\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        clearInterval(timmer);</div><div class=\"line\">    &#125;)</div><div class=\"line\">    $content.on(<span class=\"string\">\"mouseout\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        start();</div><div class=\"line\">    &#125;)</div><div class=\"line\">    $(<span class=\"string\">'.ctrls span'</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        index=$(<span class=\"keyword\">this</span>).index() + <span class=\"number\">1</span>;</div><div class=\"line\">        update();</div><div class=\"line\">    &#125;);</div><div class=\"line\">    $(<span class=\"string\">'.prew-button'</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        index--;</div><div class=\"line\">        <span class=\"keyword\">if</span>(index&lt;=<span class=\"number\">0</span>) &#123;</div><div class=\"line\">            index = <span class=\"number\">14</span>;</div><div class=\"line\">            $content.css(<span class=\"string\">\"left\"</span>, <span class=\"number\">-980</span> * <span class=\"number\">15</span> + <span class=\"string\">\"px\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        update();</div><div class=\"line\">    &#125;)</div><div class=\"line\">    $(<span class=\"string\">'.next-button'</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        index++;</div><div class=\"line\">        <span class=\"keyword\">if</span>(index&gt;<span class=\"number\">14</span>) &#123;</div><div class=\"line\">            index = <span class=\"number\">1</span>;</div><div class=\"line\">            $content.css(<span class=\"string\">\"left\"</span>, <span class=\"number\">-980</span> * <span class=\"number\">0</span> + <span class=\"string\">\"px\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        update();</div><div class=\"line\">    &#125;)</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">update</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        pass=<span class=\"literal\">true</span>;</div><div class=\"line\">        clearInterval(timmer);</div><div class=\"line\">        $ctrl.removeClass(<span class=\"string\">\"active\"</span>);</div><div class=\"line\">        $ctrl[index<span class=\"number\">-1</span>].className=<span class=\"string\">\"active\"</span>;</div><div class=\"line\">        $content.animate(&#123;<span class=\"string\">\"left\"</span>:<span class=\"number\">-980</span>*index+<span class=\"string\">\"px\"</span>&#125;,&#123; <span class=\"attr\">duration</span>: <span class=\"number\">500</span>, <span class=\"attr\">queue</span>: <span class=\"literal\">false</span>, <span class=\"attr\">complete</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;start();&#125; &#125;)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>以上为javascript代码</p>\n<p>当然在同一个页面中可以不只有一个轮播，所以有必要把他封装成一个方法，然后传入一个对象，调用执行。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> carouse=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> $content = item.$content;</div><div class=\"line\">    <span class=\"keyword\">var</span> $ctrl = item.$ctrl;</div><div class=\"line\">    <span class=\"keyword\">var</span> $ctrlsspan = item.$ctrlsspan;</div><div class=\"line\">    <span class=\"keyword\">var</span> $prew = item.$prew;</div><div class=\"line\">    <span class=\"keyword\">var</span> $next = item.$next;</div><div class=\"line\">    <span class=\"keyword\">var</span> index = <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">var</span> pages = item.pages;</div><div class=\"line\">    <span class=\"keyword\">var</span> time = item.time;</div><div class=\"line\">    <span class=\"keyword\">var</span> timmer = <span class=\"literal\">null</span>;</div><div class=\"line\">    <span class=\"keyword\">var</span> pass = <span class=\"literal\">false</span>;</div><div class=\"line\">    <span class=\"keyword\">var</span> start = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        clearInterval(timmer);</div><div class=\"line\">        timmer=setInterval(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span>(!pass)&#123;</div><div class=\"line\">                index++;</div><div class=\"line\">                <span class=\"keyword\">if</span>(index&gt;pages)&#123;</div><div class=\"line\">                    index=<span class=\"number\">1</span>;</div><div class=\"line\">                    $content.css(<span class=\"string\">\"left\"</span>,<span class=\"string\">\"0px\"</span>);</div><div class=\"line\">                    $content.animate(&#123;<span class=\"string\">\"left\"</span>:<span class=\"number\">-980</span>+<span class=\"string\">\"px\"</span>&#125;,<span class=\"number\">500</span>);</div><div class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">                    $content.animate(&#123;<span class=\"string\">\"left\"</span>:<span class=\"number\">-980</span>*index+<span class=\"string\">\"px\"</span>&#125;,<span class=\"number\">500</span>);</div><div class=\"line\">                &#125;</div><div class=\"line\">                $ctrl.removeClass(<span class=\"string\">\"active\"</span>);</div><div class=\"line\">                $ctrl[index<span class=\"number\">-1</span>].className=<span class=\"string\">\"active\"</span>;</div><div class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">                pass=<span class=\"literal\">false</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;,time)</div><div class=\"line\">    &#125;</div><div class=\"line\">    start();</div><div class=\"line\">    $content.on(<span class=\"string\">\"mouseover\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        clearInterval(timmer);</div><div class=\"line\">    &#125;)</div><div class=\"line\">    $content.on(<span class=\"string\">\"mouseout\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        start();</div><div class=\"line\">    &#125;)</div><div class=\"line\">    $ctrlsspan.click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        index=$(<span class=\"keyword\">this</span>).index() + <span class=\"number\">1</span>;</div><div class=\"line\">        update();</div><div class=\"line\">    &#125;);</div><div class=\"line\">    $prew.click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        index--;</div><div class=\"line\">        <span class=\"keyword\">if</span>(index&lt;=<span class=\"number\">0</span>) &#123;</div><div class=\"line\">            index = pages;</div><div class=\"line\">            $content.css(<span class=\"string\">\"left\"</span>, <span class=\"number\">-980</span> * (pages+<span class=\"number\">1</span>) + <span class=\"string\">\"px\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        update();</div><div class=\"line\">    &#125;)</div><div class=\"line\">    $next.click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        index++;</div><div class=\"line\">        <span class=\"keyword\">if</span>(index&gt;pages) &#123;</div><div class=\"line\">            index = <span class=\"number\">1</span>;</div><div class=\"line\">            $content.css(<span class=\"string\">\"left\"</span>, <span class=\"number\">-980</span> * <span class=\"number\">0</span> + <span class=\"string\">\"px\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        update();</div><div class=\"line\">    &#125;)</div><div class=\"line\">    <span class=\"keyword\">var</span> update = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        pass=<span class=\"literal\">true</span>;</div><div class=\"line\">        clearInterval(timmer);</div><div class=\"line\">        $ctrl.removeClass(<span class=\"string\">\"active\"</span>);</div><div class=\"line\">        $ctrl[index<span class=\"number\">-1</span>].className=<span class=\"string\">\"active\"</span>;</div><div class=\"line\">        $content.animate(&#123;<span class=\"string\">\"left\"</span>:<span class=\"number\">-980</span>*index+<span class=\"string\">\"px\"</span>&#125;,&#123; <span class=\"attr\">duration</span>: <span class=\"number\">500</span>, <span class=\"attr\">queue</span>: <span class=\"literal\">false</span>, <span class=\"attr\">complete</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;start();&#125; &#125;)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//传入的对象</span></div><div class=\"line\"><span class=\"keyword\">var</span> ALL=&#123;</div><div class=\"line\">    <span class=\"attr\">$content</span> : $(<span class=\"string\">'#ALL .carousel-body'</span>),</div><div class=\"line\">    <span class=\"attr\">$ctrl</span> : $(<span class=\"string\">'#ALL .ctrls span'</span>),</div><div class=\"line\">    <span class=\"attr\">$ctrlsspan</span> : $(<span class=\"string\">'#ALL .ctrls span'</span>),</div><div class=\"line\">    <span class=\"attr\">$prew</span> : $(<span class=\"string\">'#ALL .prew-button'</span>),</div><div class=\"line\">    <span class=\"attr\">$next</span> : $(<span class=\"string\">'#ALL .next-button'</span>),</div><div class=\"line\">    <span class=\"attr\">pages</span> : <span class=\"number\">7</span>,</div><div class=\"line\">    <span class=\"attr\">time</span> : <span class=\"number\">1000</span></div><div class=\"line\">&#125;</div><div class=\"line\">carouse(ALL);</div></pre></td></tr></table></figure></p>\n<p>封装成JQuery插件</p>\n"},{"title":"gulp","date":"2017-02-16T14:42:47.000Z","_content":"\n1 写在前面的废话\n----\n开始接触到前端自动化，感觉这个东西好省力，好神奇，只要在命令行里敲入代码就能省去以前手动引入包，打包等等工作。所以花了很多精力去学习它。学习么，总要有点收获和总结么，这里就描述一个常用的gulp任务。\n2 用gulp启动一个服务器容器\n----\n以前编写网页，总是需要安装各种容器像TOMCAT，XAMPP，但是这些容器是为服务器定制的，对于前端开发来讲有点太占资源了，还会有缓存等等问题。好在nodejs的兴起，gulp.grunt等这类工具可以替代以前的臃肿的容器。\n\n在文件目录下使用npm生成package.json,并且安装本地版本的gulp\n```bash```\nnpm init\nnpm install gulp --save-dev\n```\n安装需要的gulp工具\n这边需要的是gulp-connect\n```bash```\nnpm install gulp-connect --save-dev\n```\n新建一个gulpfile.js文件\n引入gulp和gulp-connect模块,新建一个task，配置服务器基本信息\n```javascript```\nvar gulp = require(\"gulp\");\nvar connect = require(\"gulp-connect\");\n//server\ngulp.task('server',function(){\n\tconnect.server({\n\t\troot:'./',\n\t\tlivereload:true,\n\t\tport:8320\n\t})\n})\n```\n然后就可以在命令行下输入\"gulp server\"来启动服务\n![服务启动效果](http://ojioqa2pk.bkt.clouddn.com/QQ%E5%9B%BE%E7%89%8720170217112743.png)\n但。。。。。\n![something wrong](http://ojioqa2pk.bkt.clouddn.com/l.png)\n\n3 用gulp来自动刷新页面\n---\n如果gulp就仅仅能起一个服务器容器的作用，那就错啦。grunt可以写一个功能就是在每次保存文件后，页面自动刷新，所以猜想gulp一样也能够达到相同的效果。\n\n在2的基础上，继续引入gulp-livereload模块(请事先安装模块)\n```bast```\nnpm install gulp-livereload --save-dev\n```\n```javascript```\nvar livereload = require(\"gulp-livereload\");\n```\n创建html/css/javascript的task,每个task调用livereload方法\n```javascript```\n//html\ngulp.task('html', function () {\n  gulp.src('./*.html')\n    .pipe(livereload());\n});\n//css\ngulp.task('css',function(){\n\tgulp.src('./css/*.css')\n\t.pipe(livereload());\n})\n//javascript\ngulp.task('js',function(){\n\tgulp.src('./js/*.js')\n\t.pipe(livereload());\n})\n```\n再使用gulp的watch来监视文件的变动，这里再写一个监视的task\n```javascript```\n//watch\ngulp.task('watch',function(){\n\tgulp.watch(['./*.html'],['html']);\n\tgulp.watch(['./css/*.css'],['css']);\n\tgulp.watch(['./js/*.js'],['js']);\n\tlivereload.listen();\n})\n```\n然后将监听task添加到start task中，使在start task启动时自动调用监听task\n```javascript```\ngulp.task('start',['server','watch']);\n```\n现在就可以实时刷新页面啦~~~\n![something wrong again](http://ojioqa2pk.bkt.clouddn.com/l%20%281%29.png)\n\n4 实时刷新与前端预处理结合\n----\n从前端预处理出现到现在已经有很长一段时间里，所以在用的看官老爷应该不少吧。加入预处理是必要的，但是前端预处理的语言有好几种，怎么支持几个不同的前端预处理变成了问题。\n\n首先引入对应的gulp插件以支持预处理的自动编译,这里使用stylus,less,sass做栗子\n```bash```\nnpm install gulp-stylus gulp-less gulp-sass --save-dev\n```\n在js中引入\n```javascript```\nvar less = require(\"gulp-less\"),\n\t\tsass = require(\"gulp-sass\"),\n\t\tstyl = require(\"gulp-stylus\");\n```\n创建对应的task\n```javascript```\ngulp.task('styl',function(){\n\tgulp.src('css/*.styl')\n\t.pipe(stylus())\n\t.pipe(gulp.dest('css'));\n})\ngulp.task('less',function(){\n\tgulp.src('css/*.less')\n\t.pipe(less())\n\t.pipe(gulp.dest('css'));\n})\ngulp.task('sass',function(){\n\tgulp.src('css/*.sass')\n\t.pipe(sass())\n\t.pipe(gulp.dest('css'));\n})\n```\n将这些task加入到watch中让gulp监视文件的改动\n```javascript```\n//watch\ngulp.task('watch',function(){\n\tgulp.watch(['./*.html'],['html']);\n\tgulp.watch(['./css/*.sass'],['sass']);\n\tgulp.watch(['./css/*.less'],['less']);\n\tgulp.watch(['./css/*.styl'],['styl']);\n\tgulp.watch(['./css/*.css'],['css']);\n\tgulp.watch(['./js/*.js'],['js']);\n\tlivereload.listen();\n})\n```\nOKAY这样就和css预处理结合起来了，但。。。\n没有人会同时使用多种预处理来写同一个项目吧~！\n所以就需要判断一下使用的是哪一种的预处理\n\n在package.js中加入自定义的对象\n```json```\n{\n\t\"name\":\"gulp\",\n\t....\n\t\"css\":\"styl\"\n}\n```\n使用nodejs操作文件的模块来读取package.js文件，获取到css字符串。根据这个字符串来选择对应的预处理。\n```javascript```\nvar fs = require(\"fs\");\nvar json = JSON.parse(fs.readFileSync('./package.json'));\nvar cssstyle = json.css;\n```\n在watch的task中修改成\n```javascript```\ngulp.task('watch',function(){\n\tgulp.watch(['./*.html'],['html']);\n\tgulp.watch(['./css/*.'+cssstyle],[cssstyle]);\n\tgulp.watch(['./css/*.css'],['css']);\n\tgulp.watch(['./js/*.js'],['js']);\n\tlivereload.listen();\n})\n```\n这样就可以啦，但是还有不完美的地方。。。。\n\n-0 写在后面的东东\n----\n本页用到的模块如下：\n\t1 gulp-connect 服务器模块\n\t2 gulp-livereload 自动加载模块\n\t3 gulp-stylus stylus模块\n\t4 gulp-less less模块\n\t5 gulp-sass sass模块\n\t6 fs nodejs文件操作模块\n\n\n小工具\n\n每次使用photoshop来切图，导出的图片的文件名都是凌乱的。所以查看了gulp的工具库发现了gulp-rename这个模块。\n```javascript```\nvar rename = require(\"gulp-rename\");\ngulp.task('rename',function(){\n\tvar i=1;\n\tgulp.src('./RAW/*.jpg')\n\t.pipe(rename(function(path){\n\t\tpath.basename = i++;//basename就是文件名称但不包括扩展名\n\t}))\n\t.pipe(gulp.dest('./OUT'));\n})\n```\n\n\n\n写在后面的后面\n----\n既然gulp是一个自动化工具，那么项目完成后肯定有打包这一步骤，所有我又对这个gulp任务进行了修改\n\n-1 新建文件压缩task，包括js，css，html和image\n----\n```javascript```\n//压缩js文件\ngulp.task('minifyjs',function(){\n\tgulp.src('./app/js/*js')\n\t.pipe(uglify())\n\t.pipe(rename({suffix:'.min'}))\n\t.pipe(gulp.dest('dist/js'));\n});\n//压缩图片\ngulp.task('imgmin',function(){\n\tgulp.src('./app/images/*')\n\t.pipe(imagemin())\n\t.pipe(gulp.dest('dist/images'));\n})\n//压缩Css\ngulp.task('cssmin',function(){\n\tgulp.src('./app/css/*.css')\n\t.pipe(cssmin())\n\t.pipe(rename({suffix:'.min'}))\n\t.pipe(gulp.dest('dist/css'));\n})\n//压缩html,修改html引入文件名\ngulp.task('htmlmin',function(){\n\tgulp.src('./app/*.html')\n\t.pipe(processhtml())\n\t.pipe(htmlmin({collapseWhitespace:true}))\n\t.pipe(gulp.dest('dist'));\n})\ngulp.task('build',['minifyjs','imgmin','cssmin','htmlmin']);\n```\n首先新建各种文件的压缩task，但这里有几个问题，压缩处理后的文件名需要与源文件有所区别，因而还要经过一道步骤，重命名文件。重命名文件后，又带来一个问题，在html种引入的文件与现实的文件不同，所以要修改html文件。修改如下\n```html```\n<!DOCTYPE html>\n<html lang=\"zh-cn\">\n<head>\n\t<meta charset=\"UTF-8\">\n\t<title>DEMO</title>\n\t<!-- build:css css/style.min.css-->\n\t<link rel=\"stylesheet\" href=\"css/style.css\">\n\t<!-- /build-->\n</head>\n<body>\n\t<h1>HELLO GULP</h1>\n\t<h2>something</h2>\n\t<h3>Test new file position</h3>\n\t<hr>\n\t<!--build:js js/main.min.js-->\n\t<script src=\"js/main.js\"></script>\n\t<!--/build-->\n</body>\n</html>\n```\n-2 引入文件优化\n----\n在引入文件优化前代码是这样的\n```javascript```\nvar gulp = require(\"gulp\");\nvar rename = require(\"gulp-rename\");\nvar less = require(\"gulp-less\");\nvar sass = require(\"gulp-sass\");\nvar styl = require(\"gulp-stylus\");\nvar connect = require(\"gulp-connect\");\nvar livereload = require('gulp-livereload');\n\nvar uglify = require('gulp-uglify-cli');//压缩js\nvar imgmin = require('gulp-imagemin');//压缩图片\nvar cssmin = require('gulp-cssmin');//压缩css\nvar htmlmin = require('gulp-htmlmin');//压缩html\nvar processhtml = require('gulp-processhtml');//修改html中引入的文件名\n\n```\n身为能省则省能懒则懒的好男儿，当然不能允许这种情况出现。又找了个模块gulp-load-plugins,现在的代码是这样的\n```javascript```\nvar gulp = require(\"gulp\");\nvar $ = require('gulp-load-plugins')();\n```\n当然相应的方法调用时，也要进行修改。gulp-load-plugins模块是讲每个模块都加载到$上，使用的时候就以$.foo的方式调用。\n\n[git地址](https://github.com/JingeXC/gulp-learning)\n","source":"_posts/gulp.md","raw":"---\ntitle: gulp\ndate: 2017-02-16 22:42:47\ntags: 前端自动化\n---\n\n1 写在前面的废话\n----\n开始接触到前端自动化，感觉这个东西好省力，好神奇，只要在命令行里敲入代码就能省去以前手动引入包，打包等等工作。所以花了很多精力去学习它。学习么，总要有点收获和总结么，这里就描述一个常用的gulp任务。\n2 用gulp启动一个服务器容器\n----\n以前编写网页，总是需要安装各种容器像TOMCAT，XAMPP，但是这些容器是为服务器定制的，对于前端开发来讲有点太占资源了，还会有缓存等等问题。好在nodejs的兴起，gulp.grunt等这类工具可以替代以前的臃肿的容器。\n\n在文件目录下使用npm生成package.json,并且安装本地版本的gulp\n```bash```\nnpm init\nnpm install gulp --save-dev\n```\n安装需要的gulp工具\n这边需要的是gulp-connect\n```bash```\nnpm install gulp-connect --save-dev\n```\n新建一个gulpfile.js文件\n引入gulp和gulp-connect模块,新建一个task，配置服务器基本信息\n```javascript```\nvar gulp = require(\"gulp\");\nvar connect = require(\"gulp-connect\");\n//server\ngulp.task('server',function(){\n\tconnect.server({\n\t\troot:'./',\n\t\tlivereload:true,\n\t\tport:8320\n\t})\n})\n```\n然后就可以在命令行下输入\"gulp server\"来启动服务\n![服务启动效果](http://ojioqa2pk.bkt.clouddn.com/QQ%E5%9B%BE%E7%89%8720170217112743.png)\n但。。。。。\n![something wrong](http://ojioqa2pk.bkt.clouddn.com/l.png)\n\n3 用gulp来自动刷新页面\n---\n如果gulp就仅仅能起一个服务器容器的作用，那就错啦。grunt可以写一个功能就是在每次保存文件后，页面自动刷新，所以猜想gulp一样也能够达到相同的效果。\n\n在2的基础上，继续引入gulp-livereload模块(请事先安装模块)\n```bast```\nnpm install gulp-livereload --save-dev\n```\n```javascript```\nvar livereload = require(\"gulp-livereload\");\n```\n创建html/css/javascript的task,每个task调用livereload方法\n```javascript```\n//html\ngulp.task('html', function () {\n  gulp.src('./*.html')\n    .pipe(livereload());\n});\n//css\ngulp.task('css',function(){\n\tgulp.src('./css/*.css')\n\t.pipe(livereload());\n})\n//javascript\ngulp.task('js',function(){\n\tgulp.src('./js/*.js')\n\t.pipe(livereload());\n})\n```\n再使用gulp的watch来监视文件的变动，这里再写一个监视的task\n```javascript```\n//watch\ngulp.task('watch',function(){\n\tgulp.watch(['./*.html'],['html']);\n\tgulp.watch(['./css/*.css'],['css']);\n\tgulp.watch(['./js/*.js'],['js']);\n\tlivereload.listen();\n})\n```\n然后将监听task添加到start task中，使在start task启动时自动调用监听task\n```javascript```\ngulp.task('start',['server','watch']);\n```\n现在就可以实时刷新页面啦~~~\n![something wrong again](http://ojioqa2pk.bkt.clouddn.com/l%20%281%29.png)\n\n4 实时刷新与前端预处理结合\n----\n从前端预处理出现到现在已经有很长一段时间里，所以在用的看官老爷应该不少吧。加入预处理是必要的，但是前端预处理的语言有好几种，怎么支持几个不同的前端预处理变成了问题。\n\n首先引入对应的gulp插件以支持预处理的自动编译,这里使用stylus,less,sass做栗子\n```bash```\nnpm install gulp-stylus gulp-less gulp-sass --save-dev\n```\n在js中引入\n```javascript```\nvar less = require(\"gulp-less\"),\n\t\tsass = require(\"gulp-sass\"),\n\t\tstyl = require(\"gulp-stylus\");\n```\n创建对应的task\n```javascript```\ngulp.task('styl',function(){\n\tgulp.src('css/*.styl')\n\t.pipe(stylus())\n\t.pipe(gulp.dest('css'));\n})\ngulp.task('less',function(){\n\tgulp.src('css/*.less')\n\t.pipe(less())\n\t.pipe(gulp.dest('css'));\n})\ngulp.task('sass',function(){\n\tgulp.src('css/*.sass')\n\t.pipe(sass())\n\t.pipe(gulp.dest('css'));\n})\n```\n将这些task加入到watch中让gulp监视文件的改动\n```javascript```\n//watch\ngulp.task('watch',function(){\n\tgulp.watch(['./*.html'],['html']);\n\tgulp.watch(['./css/*.sass'],['sass']);\n\tgulp.watch(['./css/*.less'],['less']);\n\tgulp.watch(['./css/*.styl'],['styl']);\n\tgulp.watch(['./css/*.css'],['css']);\n\tgulp.watch(['./js/*.js'],['js']);\n\tlivereload.listen();\n})\n```\nOKAY这样就和css预处理结合起来了，但。。。\n没有人会同时使用多种预处理来写同一个项目吧~！\n所以就需要判断一下使用的是哪一种的预处理\n\n在package.js中加入自定义的对象\n```json```\n{\n\t\"name\":\"gulp\",\n\t....\n\t\"css\":\"styl\"\n}\n```\n使用nodejs操作文件的模块来读取package.js文件，获取到css字符串。根据这个字符串来选择对应的预处理。\n```javascript```\nvar fs = require(\"fs\");\nvar json = JSON.parse(fs.readFileSync('./package.json'));\nvar cssstyle = json.css;\n```\n在watch的task中修改成\n```javascript```\ngulp.task('watch',function(){\n\tgulp.watch(['./*.html'],['html']);\n\tgulp.watch(['./css/*.'+cssstyle],[cssstyle]);\n\tgulp.watch(['./css/*.css'],['css']);\n\tgulp.watch(['./js/*.js'],['js']);\n\tlivereload.listen();\n})\n```\n这样就可以啦，但是还有不完美的地方。。。。\n\n-0 写在后面的东东\n----\n本页用到的模块如下：\n\t1 gulp-connect 服务器模块\n\t2 gulp-livereload 自动加载模块\n\t3 gulp-stylus stylus模块\n\t4 gulp-less less模块\n\t5 gulp-sass sass模块\n\t6 fs nodejs文件操作模块\n\n\n小工具\n\n每次使用photoshop来切图，导出的图片的文件名都是凌乱的。所以查看了gulp的工具库发现了gulp-rename这个模块。\n```javascript```\nvar rename = require(\"gulp-rename\");\ngulp.task('rename',function(){\n\tvar i=1;\n\tgulp.src('./RAW/*.jpg')\n\t.pipe(rename(function(path){\n\t\tpath.basename = i++;//basename就是文件名称但不包括扩展名\n\t}))\n\t.pipe(gulp.dest('./OUT'));\n})\n```\n\n\n\n写在后面的后面\n----\n既然gulp是一个自动化工具，那么项目完成后肯定有打包这一步骤，所有我又对这个gulp任务进行了修改\n\n-1 新建文件压缩task，包括js，css，html和image\n----\n```javascript```\n//压缩js文件\ngulp.task('minifyjs',function(){\n\tgulp.src('./app/js/*js')\n\t.pipe(uglify())\n\t.pipe(rename({suffix:'.min'}))\n\t.pipe(gulp.dest('dist/js'));\n});\n//压缩图片\ngulp.task('imgmin',function(){\n\tgulp.src('./app/images/*')\n\t.pipe(imagemin())\n\t.pipe(gulp.dest('dist/images'));\n})\n//压缩Css\ngulp.task('cssmin',function(){\n\tgulp.src('./app/css/*.css')\n\t.pipe(cssmin())\n\t.pipe(rename({suffix:'.min'}))\n\t.pipe(gulp.dest('dist/css'));\n})\n//压缩html,修改html引入文件名\ngulp.task('htmlmin',function(){\n\tgulp.src('./app/*.html')\n\t.pipe(processhtml())\n\t.pipe(htmlmin({collapseWhitespace:true}))\n\t.pipe(gulp.dest('dist'));\n})\ngulp.task('build',['minifyjs','imgmin','cssmin','htmlmin']);\n```\n首先新建各种文件的压缩task，但这里有几个问题，压缩处理后的文件名需要与源文件有所区别，因而还要经过一道步骤，重命名文件。重命名文件后，又带来一个问题，在html种引入的文件与现实的文件不同，所以要修改html文件。修改如下\n```html```\n<!DOCTYPE html>\n<html lang=\"zh-cn\">\n<head>\n\t<meta charset=\"UTF-8\">\n\t<title>DEMO</title>\n\t<!-- build:css css/style.min.css-->\n\t<link rel=\"stylesheet\" href=\"css/style.css\">\n\t<!-- /build-->\n</head>\n<body>\n\t<h1>HELLO GULP</h1>\n\t<h2>something</h2>\n\t<h3>Test new file position</h3>\n\t<hr>\n\t<!--build:js js/main.min.js-->\n\t<script src=\"js/main.js\"></script>\n\t<!--/build-->\n</body>\n</html>\n```\n-2 引入文件优化\n----\n在引入文件优化前代码是这样的\n```javascript```\nvar gulp = require(\"gulp\");\nvar rename = require(\"gulp-rename\");\nvar less = require(\"gulp-less\");\nvar sass = require(\"gulp-sass\");\nvar styl = require(\"gulp-stylus\");\nvar connect = require(\"gulp-connect\");\nvar livereload = require('gulp-livereload');\n\nvar uglify = require('gulp-uglify-cli');//压缩js\nvar imgmin = require('gulp-imagemin');//压缩图片\nvar cssmin = require('gulp-cssmin');//压缩css\nvar htmlmin = require('gulp-htmlmin');//压缩html\nvar processhtml = require('gulp-processhtml');//修改html中引入的文件名\n\n```\n身为能省则省能懒则懒的好男儿，当然不能允许这种情况出现。又找了个模块gulp-load-plugins,现在的代码是这样的\n```javascript```\nvar gulp = require(\"gulp\");\nvar $ = require('gulp-load-plugins')();\n```\n当然相应的方法调用时，也要进行修改。gulp-load-plugins模块是讲每个模块都加载到$上，使用的时候就以$.foo的方式调用。\n\n[git地址](https://github.com/JingeXC/gulp-learning)\n","slug":"gulp","published":1,"updated":"2017-02-21T13:25:31.061Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizfkde3i00064cw5nod9v7d2","content":"<h2 id=\"1-写在前面的废话\"><a href=\"#1-写在前面的废话\" class=\"headerlink\" title=\"1 写在前面的废话\"></a>1 写在前面的废话</h2><p>开始接触到前端自动化，感觉这个东西好省力，好神奇，只要在命令行里敲入代码就能省去以前手动引入包，打包等等工作。所以花了很多精力去学习它。学习么，总要有点收获和总结么，这里就描述一个常用的gulp任务。</p>\n<h2 id=\"2-用gulp启动一个服务器容器\"><a href=\"#2-用gulp启动一个服务器容器\" class=\"headerlink\" title=\"2 用gulp启动一个服务器容器\"></a>2 用gulp启动一个服务器容器</h2><p>以前编写网页，总是需要安装各种容器像TOMCAT，XAMPP，但是这些容器是为服务器定制的，对于前端开发来讲有点太占资源了，还会有缓存等等问题。好在nodejs的兴起，gulp.grunt等这类工具可以替代以前的臃肿的容器。</p>\n<p>在文件目录下使用npm生成package.json,并且安装本地版本的gulp<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm init</div><div class=\"line\">npm install gulp --save-dev</div></pre></td></tr></table></figure></p>\n<p>安装需要的gulp工具<br>这边需要的是gulp-connect<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install gulp-connect --save-dev</div></pre></td></tr></table></figure></p>\n<p>新建一个gulpfile.js文件<br>引入gulp和gulp-connect模块,新建一个task，配置服务器基本信息<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">var gulp = require(&quot;gulp&quot;);</div><div class=\"line\">var connect = require(&quot;gulp-connect&quot;);</div><div class=\"line\">//server</div><div class=\"line\">gulp.task(&apos;server&apos;,function()&#123;</div><div class=\"line\">\tconnect.server(&#123;</div><div class=\"line\">\t\troot:&apos;./&apos;,</div><div class=\"line\">\t\tlivereload:true,</div><div class=\"line\">\t\tport:8320</div><div class=\"line\">\t&#125;)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>然后就可以在命令行下输入”gulp server”来启动服务<br><img src=\"http://ojioqa2pk.bkt.clouddn.com/QQ%E5%9B%BE%E7%89%8720170217112743.png\" alt=\"服务启动效果\"><br>但。。。。。<br><img src=\"http://ojioqa2pk.bkt.clouddn.com/l.png\" alt=\"something wrong\"></p>\n<h2 id=\"3-用gulp来自动刷新页面\"><a href=\"#3-用gulp来自动刷新页面\" class=\"headerlink\" title=\"3 用gulp来自动刷新页面\"></a>3 用gulp来自动刷新页面</h2><p>如果gulp就仅仅能起一个服务器容器的作用，那就错啦。grunt可以写一个功能就是在每次保存文件后，页面自动刷新，所以猜想gulp一样也能够达到相同的效果。</p>\n<p>在2的基础上，继续引入gulp-livereload模块(请事先安装模块)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install gulp-livereload --save-dev</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">var livereload = require(&quot;gulp-livereload&quot;);</div></pre></td></tr></table></figure>\n<p>创建html/css/javascript的task,每个task调用livereload方法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">//html</div><div class=\"line\">gulp.task(&apos;html&apos;, function () &#123;</div><div class=\"line\">  gulp.src(&apos;./*.html&apos;)</div><div class=\"line\">    .pipe(livereload());</div><div class=\"line\">&#125;);</div><div class=\"line\">//css</div><div class=\"line\">gulp.task(&apos;css&apos;,function()&#123;</div><div class=\"line\">\tgulp.src(&apos;./css/*.css&apos;)</div><div class=\"line\">\t.pipe(livereload());</div><div class=\"line\">&#125;)</div><div class=\"line\">//javascript</div><div class=\"line\">gulp.task(&apos;js&apos;,function()&#123;</div><div class=\"line\">\tgulp.src(&apos;./js/*.js&apos;)</div><div class=\"line\">\t.pipe(livereload());</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>再使用gulp的watch来监视文件的变动，这里再写一个监视的task<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">//watch</div><div class=\"line\">gulp.task(&apos;watch&apos;,function()&#123;</div><div class=\"line\">\tgulp.watch([&apos;./*.html&apos;],[&apos;html&apos;]);</div><div class=\"line\">\tgulp.watch([&apos;./css/*.css&apos;],[&apos;css&apos;]);</div><div class=\"line\">\tgulp.watch([&apos;./js/*.js&apos;],[&apos;js&apos;]);</div><div class=\"line\">\tlivereload.listen();</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>然后将监听task添加到start task中，使在start task启动时自动调用监听task<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">gulp.task(&apos;start&apos;,[&apos;server&apos;,&apos;watch&apos;]);</div></pre></td></tr></table></figure></p>\n<p>现在就可以实时刷新页面啦~~~<br><img src=\"http://ojioqa2pk.bkt.clouddn.com/l%20%281%29.png\" alt=\"something wrong again\"></p>\n<h2 id=\"4-实时刷新与前端预处理结合\"><a href=\"#4-实时刷新与前端预处理结合\" class=\"headerlink\" title=\"4 实时刷新与前端预处理结合\"></a>4 实时刷新与前端预处理结合</h2><p>从前端预处理出现到现在已经有很长一段时间里，所以在用的看官老爷应该不少吧。加入预处理是必要的，但是前端预处理的语言有好几种，怎么支持几个不同的前端预处理变成了问题。</p>\n<p>首先引入对应的gulp插件以支持预处理的自动编译,这里使用stylus,less,sass做栗子<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install gulp-stylus gulp-less gulp-sass --save-dev</div></pre></td></tr></table></figure></p>\n<p>在js中引入<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">var less = require(&quot;gulp-less&quot;),</div><div class=\"line\">\t\tsass = require(&quot;gulp-sass&quot;),</div><div class=\"line\">\t\tstyl = require(&quot;gulp-stylus&quot;);</div></pre></td></tr></table></figure></p>\n<p>创建对应的task<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">gulp.task(&apos;styl&apos;,function()&#123;</div><div class=\"line\">\tgulp.src(&apos;css/*.styl&apos;)</div><div class=\"line\">\t.pipe(stylus())</div><div class=\"line\">\t.pipe(gulp.dest(&apos;css&apos;));</div><div class=\"line\">&#125;)</div><div class=\"line\">gulp.task(&apos;less&apos;,function()&#123;</div><div class=\"line\">\tgulp.src(&apos;css/*.less&apos;)</div><div class=\"line\">\t.pipe(less())</div><div class=\"line\">\t.pipe(gulp.dest(&apos;css&apos;));</div><div class=\"line\">&#125;)</div><div class=\"line\">gulp.task(&apos;sass&apos;,function()&#123;</div><div class=\"line\">\tgulp.src(&apos;css/*.sass&apos;)</div><div class=\"line\">\t.pipe(sass())</div><div class=\"line\">\t.pipe(gulp.dest(&apos;css&apos;));</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>将这些task加入到watch中让gulp监视文件的改动<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">//watch</div><div class=\"line\">gulp.task(&apos;watch&apos;,function()&#123;</div><div class=\"line\">\tgulp.watch([&apos;./*.html&apos;],[&apos;html&apos;]);</div><div class=\"line\">\tgulp.watch([&apos;./css/*.sass&apos;],[&apos;sass&apos;]);</div><div class=\"line\">\tgulp.watch([&apos;./css/*.less&apos;],[&apos;less&apos;]);</div><div class=\"line\">\tgulp.watch([&apos;./css/*.styl&apos;],[&apos;styl&apos;]);</div><div class=\"line\">\tgulp.watch([&apos;./css/*.css&apos;],[&apos;css&apos;]);</div><div class=\"line\">\tgulp.watch([&apos;./js/*.js&apos;],[&apos;js&apos;]);</div><div class=\"line\">\tlivereload.listen();</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>OKAY这样就和css预处理结合起来了，但。。。<br>没有人会同时使用多种预处理来写同一个项目吧~！<br>所以就需要判断一下使用的是哪一种的预处理</p>\n<p>在package.js中加入自定义的对象<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">\t&quot;name&quot;:&quot;gulp&quot;,</div><div class=\"line\">\t....</div><div class=\"line\">\t&quot;css&quot;:&quot;styl&quot;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>使用nodejs操作文件的模块来读取package.js文件，获取到css字符串。根据这个字符串来选择对应的预处理。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">var fs = require(&quot;fs&quot;);</div><div class=\"line\">var json = JSON.parse(fs.readFileSync(&apos;./package.json&apos;));</div><div class=\"line\">var cssstyle = json.css;</div></pre></td></tr></table></figure></p>\n<p>在watch的task中修改成<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">gulp.task(&apos;watch&apos;,function()&#123;</div><div class=\"line\">\tgulp.watch([&apos;./*.html&apos;],[&apos;html&apos;]);</div><div class=\"line\">\tgulp.watch([&apos;./css/*.&apos;+cssstyle],[cssstyle]);</div><div class=\"line\">\tgulp.watch([&apos;./css/*.css&apos;],[&apos;css&apos;]);</div><div class=\"line\">\tgulp.watch([&apos;./js/*.js&apos;],[&apos;js&apos;]);</div><div class=\"line\">\tlivereload.listen();</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>这样就可以啦，但是还有不完美的地方。。。。</p>\n<h2 id=\"0-写在后面的东东\"><a href=\"#0-写在后面的东东\" class=\"headerlink\" title=\"-0 写在后面的东东\"></a>-0 写在后面的东东</h2><p>本页用到的模块如下：<br>    1 gulp-connect 服务器模块<br>    2 gulp-livereload 自动加载模块<br>    3 gulp-stylus stylus模块<br>    4 gulp-less less模块<br>    5 gulp-sass sass模块<br>    6 fs nodejs文件操作模块</p>\n<p>小工具</p>\n<p>每次使用photoshop来切图，导出的图片的文件名都是凌乱的。所以查看了gulp的工具库发现了gulp-rename这个模块。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">var rename = require(&quot;gulp-rename&quot;);</div><div class=\"line\">gulp.task(&apos;rename&apos;,function()&#123;</div><div class=\"line\">\tvar i=1;</div><div class=\"line\">\tgulp.src(&apos;./RAW/*.jpg&apos;)</div><div class=\"line\">\t.pipe(rename(function(path)&#123;</div><div class=\"line\">\t\tpath.basename = i++;//basename就是文件名称但不包括扩展名</div><div class=\"line\">\t&#125;))</div><div class=\"line\">\t.pipe(gulp.dest(&apos;./OUT&apos;));</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<h2 id=\"写在后面的后面\"><a href=\"#写在后面的后面\" class=\"headerlink\" title=\"写在后面的后面\"></a>写在后面的后面</h2><p>既然gulp是一个自动化工具，那么项目完成后肯定有打包这一步骤，所有我又对这个gulp任务进行了修改</p>\n<h2 id=\"1-新建文件压缩task，包括js，css，html和image\"><a href=\"#1-新建文件压缩task，包括js，css，html和image\" class=\"headerlink\" title=\"-1 新建文件压缩task，包括js，css，html和image\"></a>-1 新建文件压缩task，包括js，css，html和image</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\">//压缩js文件</div><div class=\"line\">gulp.task(&apos;minifyjs&apos;,function()&#123;</div><div class=\"line\">\tgulp.src(&apos;./app/js/*js&apos;)</div><div class=\"line\">\t.pipe(uglify())</div><div class=\"line\">\t.pipe(rename(&#123;suffix:&apos;.min&apos;&#125;))</div><div class=\"line\">\t.pipe(gulp.dest(&apos;dist/js&apos;));</div><div class=\"line\">&#125;);</div><div class=\"line\">//压缩图片</div><div class=\"line\">gulp.task(&apos;imgmin&apos;,function()&#123;</div><div class=\"line\">\tgulp.src(&apos;./app/images/*&apos;)</div><div class=\"line\">\t.pipe(imagemin())</div><div class=\"line\">\t.pipe(gulp.dest(&apos;dist/images&apos;));</div><div class=\"line\">&#125;)</div><div class=\"line\">//压缩Css</div><div class=\"line\">gulp.task(&apos;cssmin&apos;,function()&#123;</div><div class=\"line\">\tgulp.src(&apos;./app/css/*.css&apos;)</div><div class=\"line\">\t.pipe(cssmin())</div><div class=\"line\">\t.pipe(rename(&#123;suffix:&apos;.min&apos;&#125;))</div><div class=\"line\">\t.pipe(gulp.dest(&apos;dist/css&apos;));</div><div class=\"line\">&#125;)</div><div class=\"line\">//压缩html,修改html引入文件名</div><div class=\"line\">gulp.task(&apos;htmlmin&apos;,function()&#123;</div><div class=\"line\">\tgulp.src(&apos;./app/*.html&apos;)</div><div class=\"line\">\t.pipe(processhtml())</div><div class=\"line\">\t.pipe(htmlmin(&#123;collapseWhitespace:true&#125;))</div><div class=\"line\">\t.pipe(gulp.dest(&apos;dist&apos;));</div><div class=\"line\">&#125;)</div><div class=\"line\">gulp.task(&apos;build&apos;,[&apos;minifyjs&apos;,&apos;imgmin&apos;,&apos;cssmin&apos;,&apos;htmlmin&apos;]);</div></pre></td></tr></table></figure>\n<p>首先新建各种文件的压缩task，但这里有几个问题，压缩处理后的文件名需要与源文件有所区别，因而还要经过一道步骤，重命名文件。重命名文件后，又带来一个问题，在html种引入的文件与现实的文件不同，所以要修改html文件。修改如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!DOCTYPE html&gt;</div><div class=\"line\">&lt;html lang=&quot;zh-cn&quot;&gt;</div><div class=\"line\">&lt;head&gt;</div><div class=\"line\">\t&lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class=\"line\">\t&lt;title&gt;DEMO&lt;/title&gt;</div><div class=\"line\">\t&lt;!-- build:css css/style.min.css--&gt;</div><div class=\"line\">\t&lt;link rel=&quot;stylesheet&quot; href=&quot;css/style.css&quot;&gt;</div><div class=\"line\">\t&lt;!-- /build--&gt;</div><div class=\"line\">&lt;/head&gt;</div><div class=\"line\">&lt;body&gt;</div><div class=\"line\">\t&lt;h1&gt;HELLO GULP&lt;/h1&gt;</div><div class=\"line\">\t&lt;h2&gt;something&lt;/h2&gt;</div><div class=\"line\">\t&lt;h3&gt;Test new file position&lt;/h3&gt;</div><div class=\"line\">\t&lt;hr&gt;</div><div class=\"line\">\t&lt;!--build:js js/main.min.js--&gt;</div><div class=\"line\">\t&lt;script src=&quot;js/main.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\">\t&lt;!--/build--&gt;</div><div class=\"line\">&lt;/body&gt;</div><div class=\"line\">&lt;/html&gt;</div></pre></td></tr></table></figure></p>\n<h2 id=\"2-引入文件优化\"><a href=\"#2-引入文件优化\" class=\"headerlink\" title=\"-2 引入文件优化\"></a>-2 引入文件优化</h2><p>在引入文件优化前代码是这样的<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">var gulp = require(&quot;gulp&quot;);</div><div class=\"line\">var rename = require(&quot;gulp-rename&quot;);</div><div class=\"line\">var less = require(&quot;gulp-less&quot;);</div><div class=\"line\">var sass = require(&quot;gulp-sass&quot;);</div><div class=\"line\">var styl = require(&quot;gulp-stylus&quot;);</div><div class=\"line\">var connect = require(&quot;gulp-connect&quot;);</div><div class=\"line\">var livereload = require(&apos;gulp-livereload&apos;);</div><div class=\"line\"></div><div class=\"line\">var uglify = require(&apos;gulp-uglify-cli&apos;);//压缩js</div><div class=\"line\">var imgmin = require(&apos;gulp-imagemin&apos;);//压缩图片</div><div class=\"line\">var cssmin = require(&apos;gulp-cssmin&apos;);//压缩css</div><div class=\"line\">var htmlmin = require(&apos;gulp-htmlmin&apos;);//压缩html</div><div class=\"line\">var processhtml = require(&apos;gulp-processhtml&apos;);//修改html中引入的文件名</div></pre></td></tr></table></figure></p>\n<p>身为能省则省能懒则懒的好男儿，当然不能允许这种情况出现。又找了个模块gulp-load-plugins,现在的代码是这样的<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">var gulp = require(&quot;gulp&quot;);</div><div class=\"line\">var $ = require(&apos;gulp-load-plugins&apos;)();</div></pre></td></tr></table></figure></p>\n<p>当然相应的方法调用时，也要进行修改。gulp-load-plugins模块是讲每个模块都加载到$上，使用的时候就以$.foo的方式调用。</p>\n<p><a href=\"https://github.com/JingeXC/gulp-learning\" target=\"_blank\" rel=\"external\">git地址</a></p>\n","excerpt":"","more":"<h2 id=\"1-写在前面的废话\"><a href=\"#1-写在前面的废话\" class=\"headerlink\" title=\"1 写在前面的废话\"></a>1 写在前面的废话</h2><p>开始接触到前端自动化，感觉这个东西好省力，好神奇，只要在命令行里敲入代码就能省去以前手动引入包，打包等等工作。所以花了很多精力去学习它。学习么，总要有点收获和总结么，这里就描述一个常用的gulp任务。</p>\n<h2 id=\"2-用gulp启动一个服务器容器\"><a href=\"#2-用gulp启动一个服务器容器\" class=\"headerlink\" title=\"2 用gulp启动一个服务器容器\"></a>2 用gulp启动一个服务器容器</h2><p>以前编写网页，总是需要安装各种容器像TOMCAT，XAMPP，但是这些容器是为服务器定制的，对于前端开发来讲有点太占资源了，还会有缓存等等问题。好在nodejs的兴起，gulp.grunt等这类工具可以替代以前的臃肿的容器。</p>\n<p>在文件目录下使用npm生成package.json,并且安装本地版本的gulp<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm init</div><div class=\"line\">npm install gulp --save-dev</div></pre></td></tr></table></figure></p>\n<p>安装需要的gulp工具<br>这边需要的是gulp-connect<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install gulp-connect --save-dev</div></pre></td></tr></table></figure></p>\n<p>新建一个gulpfile.js文件<br>引入gulp和gulp-connect模块,新建一个task，配置服务器基本信息<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">var gulp = require(&quot;gulp&quot;);</div><div class=\"line\">var connect = require(&quot;gulp-connect&quot;);</div><div class=\"line\">//server</div><div class=\"line\">gulp.task(&apos;server&apos;,function()&#123;</div><div class=\"line\">\tconnect.server(&#123;</div><div class=\"line\">\t\troot:&apos;./&apos;,</div><div class=\"line\">\t\tlivereload:true,</div><div class=\"line\">\t\tport:8320</div><div class=\"line\">\t&#125;)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>然后就可以在命令行下输入”gulp server”来启动服务<br><img src=\"http://ojioqa2pk.bkt.clouddn.com/QQ%E5%9B%BE%E7%89%8720170217112743.png\" alt=\"服务启动效果\"><br>但。。。。。<br><img src=\"http://ojioqa2pk.bkt.clouddn.com/l.png\" alt=\"something wrong\"></p>\n<h2 id=\"3-用gulp来自动刷新页面\"><a href=\"#3-用gulp来自动刷新页面\" class=\"headerlink\" title=\"3 用gulp来自动刷新页面\"></a>3 用gulp来自动刷新页面</h2><p>如果gulp就仅仅能起一个服务器容器的作用，那就错啦。grunt可以写一个功能就是在每次保存文件后，页面自动刷新，所以猜想gulp一样也能够达到相同的效果。</p>\n<p>在2的基础上，继续引入gulp-livereload模块(请事先安装模块)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install gulp-livereload --save-dev</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">var livereload = require(&quot;gulp-livereload&quot;);</div></pre></td></tr></table></figure>\n<p>创建html/css/javascript的task,每个task调用livereload方法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">//html</div><div class=\"line\">gulp.task(&apos;html&apos;, function () &#123;</div><div class=\"line\">  gulp.src(&apos;./*.html&apos;)</div><div class=\"line\">    .pipe(livereload());</div><div class=\"line\">&#125;);</div><div class=\"line\">//css</div><div class=\"line\">gulp.task(&apos;css&apos;,function()&#123;</div><div class=\"line\">\tgulp.src(&apos;./css/*.css&apos;)</div><div class=\"line\">\t.pipe(livereload());</div><div class=\"line\">&#125;)</div><div class=\"line\">//javascript</div><div class=\"line\">gulp.task(&apos;js&apos;,function()&#123;</div><div class=\"line\">\tgulp.src(&apos;./js/*.js&apos;)</div><div class=\"line\">\t.pipe(livereload());</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>再使用gulp的watch来监视文件的变动，这里再写一个监视的task<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">//watch</div><div class=\"line\">gulp.task(&apos;watch&apos;,function()&#123;</div><div class=\"line\">\tgulp.watch([&apos;./*.html&apos;],[&apos;html&apos;]);</div><div class=\"line\">\tgulp.watch([&apos;./css/*.css&apos;],[&apos;css&apos;]);</div><div class=\"line\">\tgulp.watch([&apos;./js/*.js&apos;],[&apos;js&apos;]);</div><div class=\"line\">\tlivereload.listen();</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>然后将监听task添加到start task中，使在start task启动时自动调用监听task<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">gulp.task(&apos;start&apos;,[&apos;server&apos;,&apos;watch&apos;]);</div></pre></td></tr></table></figure></p>\n<p>现在就可以实时刷新页面啦~~~<br><img src=\"http://ojioqa2pk.bkt.clouddn.com/l%20%281%29.png\" alt=\"something wrong again\"></p>\n<h2 id=\"4-实时刷新与前端预处理结合\"><a href=\"#4-实时刷新与前端预处理结合\" class=\"headerlink\" title=\"4 实时刷新与前端预处理结合\"></a>4 实时刷新与前端预处理结合</h2><p>从前端预处理出现到现在已经有很长一段时间里，所以在用的看官老爷应该不少吧。加入预处理是必要的，但是前端预处理的语言有好几种，怎么支持几个不同的前端预处理变成了问题。</p>\n<p>首先引入对应的gulp插件以支持预处理的自动编译,这里使用stylus,less,sass做栗子<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install gulp-stylus gulp-less gulp-sass --save-dev</div></pre></td></tr></table></figure></p>\n<p>在js中引入<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">var less = require(&quot;gulp-less&quot;),</div><div class=\"line\">\t\tsass = require(&quot;gulp-sass&quot;),</div><div class=\"line\">\t\tstyl = require(&quot;gulp-stylus&quot;);</div></pre></td></tr></table></figure></p>\n<p>创建对应的task<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">gulp.task(&apos;styl&apos;,function()&#123;</div><div class=\"line\">\tgulp.src(&apos;css/*.styl&apos;)</div><div class=\"line\">\t.pipe(stylus())</div><div class=\"line\">\t.pipe(gulp.dest(&apos;css&apos;));</div><div class=\"line\">&#125;)</div><div class=\"line\">gulp.task(&apos;less&apos;,function()&#123;</div><div class=\"line\">\tgulp.src(&apos;css/*.less&apos;)</div><div class=\"line\">\t.pipe(less())</div><div class=\"line\">\t.pipe(gulp.dest(&apos;css&apos;));</div><div class=\"line\">&#125;)</div><div class=\"line\">gulp.task(&apos;sass&apos;,function()&#123;</div><div class=\"line\">\tgulp.src(&apos;css/*.sass&apos;)</div><div class=\"line\">\t.pipe(sass())</div><div class=\"line\">\t.pipe(gulp.dest(&apos;css&apos;));</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>将这些task加入到watch中让gulp监视文件的改动<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">//watch</div><div class=\"line\">gulp.task(&apos;watch&apos;,function()&#123;</div><div class=\"line\">\tgulp.watch([&apos;./*.html&apos;],[&apos;html&apos;]);</div><div class=\"line\">\tgulp.watch([&apos;./css/*.sass&apos;],[&apos;sass&apos;]);</div><div class=\"line\">\tgulp.watch([&apos;./css/*.less&apos;],[&apos;less&apos;]);</div><div class=\"line\">\tgulp.watch([&apos;./css/*.styl&apos;],[&apos;styl&apos;]);</div><div class=\"line\">\tgulp.watch([&apos;./css/*.css&apos;],[&apos;css&apos;]);</div><div class=\"line\">\tgulp.watch([&apos;./js/*.js&apos;],[&apos;js&apos;]);</div><div class=\"line\">\tlivereload.listen();</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>OKAY这样就和css预处理结合起来了，但。。。<br>没有人会同时使用多种预处理来写同一个项目吧~！<br>所以就需要判断一下使用的是哪一种的预处理</p>\n<p>在package.js中加入自定义的对象<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">\t&quot;name&quot;:&quot;gulp&quot;,</div><div class=\"line\">\t....</div><div class=\"line\">\t&quot;css&quot;:&quot;styl&quot;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>使用nodejs操作文件的模块来读取package.js文件，获取到css字符串。根据这个字符串来选择对应的预处理。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">var fs = require(&quot;fs&quot;);</div><div class=\"line\">var json = JSON.parse(fs.readFileSync(&apos;./package.json&apos;));</div><div class=\"line\">var cssstyle = json.css;</div></pre></td></tr></table></figure></p>\n<p>在watch的task中修改成<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">gulp.task(&apos;watch&apos;,function()&#123;</div><div class=\"line\">\tgulp.watch([&apos;./*.html&apos;],[&apos;html&apos;]);</div><div class=\"line\">\tgulp.watch([&apos;./css/*.&apos;+cssstyle],[cssstyle]);</div><div class=\"line\">\tgulp.watch([&apos;./css/*.css&apos;],[&apos;css&apos;]);</div><div class=\"line\">\tgulp.watch([&apos;./js/*.js&apos;],[&apos;js&apos;]);</div><div class=\"line\">\tlivereload.listen();</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>这样就可以啦，但是还有不完美的地方。。。。</p>\n<h2 id=\"0-写在后面的东东\"><a href=\"#0-写在后面的东东\" class=\"headerlink\" title=\"-0 写在后面的东东\"></a>-0 写在后面的东东</h2><p>本页用到的模块如下：<br>    1 gulp-connect 服务器模块<br>    2 gulp-livereload 自动加载模块<br>    3 gulp-stylus stylus模块<br>    4 gulp-less less模块<br>    5 gulp-sass sass模块<br>    6 fs nodejs文件操作模块</p>\n<p>小工具</p>\n<p>每次使用photoshop来切图，导出的图片的文件名都是凌乱的。所以查看了gulp的工具库发现了gulp-rename这个模块。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">var rename = require(&quot;gulp-rename&quot;);</div><div class=\"line\">gulp.task(&apos;rename&apos;,function()&#123;</div><div class=\"line\">\tvar i=1;</div><div class=\"line\">\tgulp.src(&apos;./RAW/*.jpg&apos;)</div><div class=\"line\">\t.pipe(rename(function(path)&#123;</div><div class=\"line\">\t\tpath.basename = i++;//basename就是文件名称但不包括扩展名</div><div class=\"line\">\t&#125;))</div><div class=\"line\">\t.pipe(gulp.dest(&apos;./OUT&apos;));</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<h2 id=\"写在后面的后面\"><a href=\"#写在后面的后面\" class=\"headerlink\" title=\"写在后面的后面\"></a>写在后面的后面</h2><p>既然gulp是一个自动化工具，那么项目完成后肯定有打包这一步骤，所有我又对这个gulp任务进行了修改</p>\n<h2 id=\"1-新建文件压缩task，包括js，css，html和image\"><a href=\"#1-新建文件压缩task，包括js，css，html和image\" class=\"headerlink\" title=\"-1 新建文件压缩task，包括js，css，html和image\"></a>-1 新建文件压缩task，包括js，css，html和image</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\">//压缩js文件</div><div class=\"line\">gulp.task(&apos;minifyjs&apos;,function()&#123;</div><div class=\"line\">\tgulp.src(&apos;./app/js/*js&apos;)</div><div class=\"line\">\t.pipe(uglify())</div><div class=\"line\">\t.pipe(rename(&#123;suffix:&apos;.min&apos;&#125;))</div><div class=\"line\">\t.pipe(gulp.dest(&apos;dist/js&apos;));</div><div class=\"line\">&#125;);</div><div class=\"line\">//压缩图片</div><div class=\"line\">gulp.task(&apos;imgmin&apos;,function()&#123;</div><div class=\"line\">\tgulp.src(&apos;./app/images/*&apos;)</div><div class=\"line\">\t.pipe(imagemin())</div><div class=\"line\">\t.pipe(gulp.dest(&apos;dist/images&apos;));</div><div class=\"line\">&#125;)</div><div class=\"line\">//压缩Css</div><div class=\"line\">gulp.task(&apos;cssmin&apos;,function()&#123;</div><div class=\"line\">\tgulp.src(&apos;./app/css/*.css&apos;)</div><div class=\"line\">\t.pipe(cssmin())</div><div class=\"line\">\t.pipe(rename(&#123;suffix:&apos;.min&apos;&#125;))</div><div class=\"line\">\t.pipe(gulp.dest(&apos;dist/css&apos;));</div><div class=\"line\">&#125;)</div><div class=\"line\">//压缩html,修改html引入文件名</div><div class=\"line\">gulp.task(&apos;htmlmin&apos;,function()&#123;</div><div class=\"line\">\tgulp.src(&apos;./app/*.html&apos;)</div><div class=\"line\">\t.pipe(processhtml())</div><div class=\"line\">\t.pipe(htmlmin(&#123;collapseWhitespace:true&#125;))</div><div class=\"line\">\t.pipe(gulp.dest(&apos;dist&apos;));</div><div class=\"line\">&#125;)</div><div class=\"line\">gulp.task(&apos;build&apos;,[&apos;minifyjs&apos;,&apos;imgmin&apos;,&apos;cssmin&apos;,&apos;htmlmin&apos;]);</div></pre></td></tr></table></figure>\n<p>首先新建各种文件的压缩task，但这里有几个问题，压缩处理后的文件名需要与源文件有所区别，因而还要经过一道步骤，重命名文件。重命名文件后，又带来一个问题，在html种引入的文件与现实的文件不同，所以要修改html文件。修改如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!DOCTYPE html&gt;</div><div class=\"line\">&lt;html lang=&quot;zh-cn&quot;&gt;</div><div class=\"line\">&lt;head&gt;</div><div class=\"line\">\t&lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class=\"line\">\t&lt;title&gt;DEMO&lt;/title&gt;</div><div class=\"line\">\t&lt;!-- build:css css/style.min.css--&gt;</div><div class=\"line\">\t&lt;link rel=&quot;stylesheet&quot; href=&quot;css/style.css&quot;&gt;</div><div class=\"line\">\t&lt;!-- /build--&gt;</div><div class=\"line\">&lt;/head&gt;</div><div class=\"line\">&lt;body&gt;</div><div class=\"line\">\t&lt;h1&gt;HELLO GULP&lt;/h1&gt;</div><div class=\"line\">\t&lt;h2&gt;something&lt;/h2&gt;</div><div class=\"line\">\t&lt;h3&gt;Test new file position&lt;/h3&gt;</div><div class=\"line\">\t&lt;hr&gt;</div><div class=\"line\">\t&lt;!--build:js js/main.min.js--&gt;</div><div class=\"line\">\t&lt;script src=&quot;js/main.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\">\t&lt;!--/build--&gt;</div><div class=\"line\">&lt;/body&gt;</div><div class=\"line\">&lt;/html&gt;</div></pre></td></tr></table></figure></p>\n<h2 id=\"2-引入文件优化\"><a href=\"#2-引入文件优化\" class=\"headerlink\" title=\"-2 引入文件优化\"></a>-2 引入文件优化</h2><p>在引入文件优化前代码是这样的<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">var gulp = require(&quot;gulp&quot;);</div><div class=\"line\">var rename = require(&quot;gulp-rename&quot;);</div><div class=\"line\">var less = require(&quot;gulp-less&quot;);</div><div class=\"line\">var sass = require(&quot;gulp-sass&quot;);</div><div class=\"line\">var styl = require(&quot;gulp-stylus&quot;);</div><div class=\"line\">var connect = require(&quot;gulp-connect&quot;);</div><div class=\"line\">var livereload = require(&apos;gulp-livereload&apos;);</div><div class=\"line\"></div><div class=\"line\">var uglify = require(&apos;gulp-uglify-cli&apos;);//压缩js</div><div class=\"line\">var imgmin = require(&apos;gulp-imagemin&apos;);//压缩图片</div><div class=\"line\">var cssmin = require(&apos;gulp-cssmin&apos;);//压缩css</div><div class=\"line\">var htmlmin = require(&apos;gulp-htmlmin&apos;);//压缩html</div><div class=\"line\">var processhtml = require(&apos;gulp-processhtml&apos;);//修改html中引入的文件名</div></pre></td></tr></table></figure></p>\n<p>身为能省则省能懒则懒的好男儿，当然不能允许这种情况出现。又找了个模块gulp-load-plugins,现在的代码是这样的<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">var gulp = require(&quot;gulp&quot;);</div><div class=\"line\">var $ = require(&apos;gulp-load-plugins&apos;)();</div></pre></td></tr></table></figure></p>\n<p>当然相应的方法调用时，也要进行修改。gulp-load-plugins模块是讲每个模块都加载到$上，使用的时候就以$.foo的方式调用。</p>\n<p><a href=\"https://github.com/JingeXC/gulp-learning\">git地址</a></p>\n"},{"title":"googleadinionic","date":"2017-01-03T14:22:15.000Z","_content":"广告是开发app的一大收入来源，所以讲广告加入app变得很重要。本文只描述在angular+ionic的app中如何加入广告。\n\n1 在html中加入谷歌广告代码，这是最简单的方式。但是这有局限性，不能根据内容的多少来加载广告。\n\n2 使用指令的方式，在需要的位置添加，还可以repeat多条广告。\n```javascript\n.directive('googlead', function ($parse, $rootScope, $compile) {\n        return {\n            restrict: \"AE\",\n            scope: false,\n            link: function (scope, elem, attr) {\n                var gpt=sessionStorage.getItem('gpt');\n                if(gpt==undefined){\n                    gpt=0;\n                }\n                var index=parseInt(gpt) + 1;\n                sessionStorage.setItem(\"gpt\",index);\n                elem[0].setAttribute('id', 'div-gpt-ad-xxxxxxxxxxxx-' + index);\n                var dom = '<script>googletag.cmd.push(function() {googletag.defineSlot(\"/xxxxxxxx/MS_StripAd_A\", [320, 50], \"div-gpt-ad-xxxxxxxxxxxx-' + index + '\").addService(googletag.pubads()).setCollapseEmptyDiv(true, true);googletag.pubads().enableSingleRequest();googletag.enableServices();});googletag.cmd.push(function() {googletag.display(\"div-gpt-ad-xxxxxxxxxxxx-' + index + '\"); });</script>';\n                $(elem).append($compile(dom)(scope));\n            }\n        }\n    })\n```\n先生成广告序列，然后拼装js代码，最后将代码注入到app中运行。\n","source":"_posts/googleadinionic.md","raw":"---\ntitle: googleadinionic\ndate: 2017-01-03 22:22:15\ntags: ionic,angular,googleAD\n---\n广告是开发app的一大收入来源，所以讲广告加入app变得很重要。本文只描述在angular+ionic的app中如何加入广告。\n\n1 在html中加入谷歌广告代码，这是最简单的方式。但是这有局限性，不能根据内容的多少来加载广告。\n\n2 使用指令的方式，在需要的位置添加，还可以repeat多条广告。\n```javascript\n.directive('googlead', function ($parse, $rootScope, $compile) {\n        return {\n            restrict: \"AE\",\n            scope: false,\n            link: function (scope, elem, attr) {\n                var gpt=sessionStorage.getItem('gpt');\n                if(gpt==undefined){\n                    gpt=0;\n                }\n                var index=parseInt(gpt) + 1;\n                sessionStorage.setItem(\"gpt\",index);\n                elem[0].setAttribute('id', 'div-gpt-ad-xxxxxxxxxxxx-' + index);\n                var dom = '<script>googletag.cmd.push(function() {googletag.defineSlot(\"/xxxxxxxx/MS_StripAd_A\", [320, 50], \"div-gpt-ad-xxxxxxxxxxxx-' + index + '\").addService(googletag.pubads()).setCollapseEmptyDiv(true, true);googletag.pubads().enableSingleRequest();googletag.enableServices();});googletag.cmd.push(function() {googletag.display(\"div-gpt-ad-xxxxxxxxxxxx-' + index + '\"); });</script>';\n                $(elem).append($compile(dom)(scope));\n            }\n        }\n    })\n```\n先生成广告序列，然后拼装js代码，最后将代码注入到app中运行。\n","slug":"googleadinionic","published":1,"updated":"2017-01-15T04:53:45.854Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizfkde3l00094cw5rjy8sazh","content":"<p>广告是开发app的一大收入来源，所以讲广告加入app变得很重要。本文只描述在angular+ionic的app中如何加入广告。</p>\n<p>1 在html中加入谷歌广告代码，这是最简单的方式。但是这有局限性，不能根据内容的多少来加载广告。</p>\n<p>2 使用指令的方式，在需要的位置添加，还可以repeat多条广告。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">.directive(<span class=\"string\">'googlead'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">$parse, $rootScope, $compile</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">            <span class=\"attr\">restrict</span>: <span class=\"string\">\"AE\"</span>,</div><div class=\"line\">            <span class=\"attr\">scope</span>: <span class=\"literal\">false</span>,</div><div class=\"line\">            <span class=\"attr\">link</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">scope, elem, attr</span>) </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">var</span> gpt=sessionStorage.getItem(<span class=\"string\">'gpt'</span>);</div><div class=\"line\">                <span class=\"keyword\">if</span>(gpt==<span class=\"literal\">undefined</span>)&#123;</div><div class=\"line\">                    gpt=<span class=\"number\">0</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">var</span> index=<span class=\"built_in\">parseInt</span>(gpt) + <span class=\"number\">1</span>;</div><div class=\"line\">                sessionStorage.setItem(<span class=\"string\">\"gpt\"</span>,index);</div><div class=\"line\">                elem[<span class=\"number\">0</span>].setAttribute(<span class=\"string\">'id'</span>, <span class=\"string\">'div-gpt-ad-xxxxxxxxxxxx-'</span> + index);</div><div class=\"line\">                <span class=\"keyword\">var</span> dom = <span class=\"string\">'&lt;script&gt;googletag.cmd.push(function() &#123;googletag.defineSlot(\"/xxxxxxxx/MS_StripAd_A\", [320, 50], \"div-gpt-ad-xxxxxxxxxxxx-'</span> + index + <span class=\"string\">'\").addService(googletag.pubads()).setCollapseEmptyDiv(true, true);googletag.pubads().enableSingleRequest();googletag.enableServices();&#125;);googletag.cmd.push(function() &#123;googletag.display(\"div-gpt-ad-xxxxxxxxxxxx-'</span> + index + <span class=\"string\">'\"); &#125;);&lt;/script&gt;'</span>;</div><div class=\"line\">                $(elem).append($compile(dom)(scope));</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;)</div></pre></td></tr></table></figure></p>\n<p>先生成广告序列，然后拼装js代码，最后将代码注入到app中运行。</p>\n","excerpt":"","more":"<p>广告是开发app的一大收入来源，所以讲广告加入app变得很重要。本文只描述在angular+ionic的app中如何加入广告。</p>\n<p>1 在html中加入谷歌广告代码，这是最简单的方式。但是这有局限性，不能根据内容的多少来加载广告。</p>\n<p>2 使用指令的方式，在需要的位置添加，还可以repeat多条广告。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">.directive(<span class=\"string\">'googlead'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">$parse, $rootScope, $compile</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">            <span class=\"attr\">restrict</span>: <span class=\"string\">\"AE\"</span>,</div><div class=\"line\">            <span class=\"attr\">scope</span>: <span class=\"literal\">false</span>,</div><div class=\"line\">            <span class=\"attr\">link</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">scope, elem, attr</span>) </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">var</span> gpt=sessionStorage.getItem(<span class=\"string\">'gpt'</span>);</div><div class=\"line\">                <span class=\"keyword\">if</span>(gpt==<span class=\"literal\">undefined</span>)&#123;</div><div class=\"line\">                    gpt=<span class=\"number\">0</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">var</span> index=<span class=\"built_in\">parseInt</span>(gpt) + <span class=\"number\">1</span>;</div><div class=\"line\">                sessionStorage.setItem(<span class=\"string\">\"gpt\"</span>,index);</div><div class=\"line\">                elem[<span class=\"number\">0</span>].setAttribute(<span class=\"string\">'id'</span>, <span class=\"string\">'div-gpt-ad-xxxxxxxxxxxx-'</span> + index);</div><div class=\"line\">                <span class=\"keyword\">var</span> dom = <span class=\"string\">'&lt;script&gt;googletag.cmd.push(function() &#123;googletag.defineSlot(\"/xxxxxxxx/MS_StripAd_A\", [320, 50], \"div-gpt-ad-xxxxxxxxxxxx-'</span> + index + <span class=\"string\">'\").addService(googletag.pubads()).setCollapseEmptyDiv(true, true);googletag.pubads().enableSingleRequest();googletag.enableServices();&#125;);googletag.cmd.push(function() &#123;googletag.display(\"div-gpt-ad-xxxxxxxxxxxx-'</span> + index + <span class=\"string\">'\"); &#125;);&lt;/script&gt;'</span>;</div><div class=\"line\">                $(elem).append($compile(dom)(scope));</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;)</div></pre></td></tr></table></figure></p>\n<p>先生成广告序列，然后拼装js代码，最后将代码注入到app中运行。</p>\n"},{"title":"ionicSlide","date":"2017-01-03T13:44:51.000Z","_content":"ionic+angular开发app，在ios下发现一个交换上的问题。之前我从来都不知道ios有右滑动返回的效果（当然这我不用iphone有关），这就产生了一个问题，ionic应用在iphone下，右滑会有两次页面进入动画。这严重影响了用户体验，产品也不会放过啦。开始，对这个问题毫无头绪，毕竟这是在手机上出现的问题，没办法调试，只好去搜索答案，然后一个一个地尝试。但尝试了很多方法，都没有成功。其中有一个博客给了我启发，在ios下，ionic自带了一个页面切换的动画效果，而ios也有一个动画效果，这就是问题所在了。我只需要将ionic里的动画效果禁用即可。不过，禁用的方法有好几种，只有一种是可以的（对于我的app来说）。\n在app.js中加入下面这句话。\n```javascript\n$ionicConfigProvider.views.transition('none');\n```\n另外在附上其他禁用右滑返回的方法\n1 在app.js中加入\n```javascript\n $ionicConfigProvider.views.swipeBackEnabled(false);\n```\n2 在<code><ionic-view></ionic-view></code>中加入<code>can-swipe-back=\"false\"\n</code>\n3 使用指令\n```html\n<div on-swipe-left=\"swipeleftAction()\">\n</div>\n```\n4 使用监控路由的方式\n[链接](http://www.songliuchen.com/Article/58.aspx)\n5 通过取消ionic自带动画效果\n```html\n<ion-view view-title=\"个人中心\" animation=\"no-animation\">\n```\n```javascript\n$ionicConfigProvider.views.transition('none');\n```\n","source":"_posts/ionicSlide.md","raw":"---\ntitle: ionicSlide\ndate: 2017-01-03 21:44:51\ntags: ionic,angular\n---\nionic+angular开发app，在ios下发现一个交换上的问题。之前我从来都不知道ios有右滑动返回的效果（当然这我不用iphone有关），这就产生了一个问题，ionic应用在iphone下，右滑会有两次页面进入动画。这严重影响了用户体验，产品也不会放过啦。开始，对这个问题毫无头绪，毕竟这是在手机上出现的问题，没办法调试，只好去搜索答案，然后一个一个地尝试。但尝试了很多方法，都没有成功。其中有一个博客给了我启发，在ios下，ionic自带了一个页面切换的动画效果，而ios也有一个动画效果，这就是问题所在了。我只需要将ionic里的动画效果禁用即可。不过，禁用的方法有好几种，只有一种是可以的（对于我的app来说）。\n在app.js中加入下面这句话。\n```javascript\n$ionicConfigProvider.views.transition('none');\n```\n另外在附上其他禁用右滑返回的方法\n1 在app.js中加入\n```javascript\n $ionicConfigProvider.views.swipeBackEnabled(false);\n```\n2 在<code><ionic-view></ionic-view></code>中加入<code>can-swipe-back=\"false\"\n</code>\n3 使用指令\n```html\n<div on-swipe-left=\"swipeleftAction()\">\n</div>\n```\n4 使用监控路由的方式\n[链接](http://www.songliuchen.com/Article/58.aspx)\n5 通过取消ionic自带动画效果\n```html\n<ion-view view-title=\"个人中心\" animation=\"no-animation\">\n```\n```javascript\n$ionicConfigProvider.views.transition('none');\n```\n","slug":"ionicSlide","published":1,"updated":"2017-01-15T04:54:01.994Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizfkde3p000a4cw5iem7xiqz","content":"<p>ionic+angular开发app，在ios下发现一个交换上的问题。之前我从来都不知道ios有右滑动返回的效果（当然这我不用iphone有关），这就产生了一个问题，ionic应用在iphone下，右滑会有两次页面进入动画。这严重影响了用户体验，产品也不会放过啦。开始，对这个问题毫无头绪，毕竟这是在手机上出现的问题，没办法调试，只好去搜索答案，然后一个一个地尝试。但尝试了很多方法，都没有成功。其中有一个博客给了我启发，在ios下，ionic自带了一个页面切换的动画效果，而ios也有一个动画效果，这就是问题所在了。我只需要将ionic里的动画效果禁用即可。不过，禁用的方法有好几种，只有一种是可以的（对于我的app来说）。<br>在app.js中加入下面这句话。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ionicConfigProvider.views.transition(<span class=\"string\">'none'</span>);</div></pre></td></tr></table></figure></p>\n<p>另外在附上其他禁用右滑返回的方法<br>1 在app.js中加入<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ionicConfigProvider.views.swipeBackEnabled(<span class=\"literal\">false</span>);</div></pre></td></tr></table></figure></p>\n<p>2 在<code><ionic-view></ionic-view></code>中加入<code>can-swipe-back=”false”<br></code><br>3 使用指令<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">on-swipe-left</span>=<span class=\"string\">\"swipeleftAction()\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>4 使用监控路由的方式<br><a href=\"http://www.songliuchen.com/Article/58.aspx\" target=\"_blank\" rel=\"external\">链接</a><br>5 通过取消ionic自带动画效果<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ion-view</span> <span class=\"attr\">view-title</span>=<span class=\"string\">\"个人中心\"</span> <span class=\"attr\">animation</span>=<span class=\"string\">\"no-animation\"</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ionicConfigProvider.views.transition(<span class=\"string\">'none'</span>);</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<p>ionic+angular开发app，在ios下发现一个交换上的问题。之前我从来都不知道ios有右滑动返回的效果（当然这我不用iphone有关），这就产生了一个问题，ionic应用在iphone下，右滑会有两次页面进入动画。这严重影响了用户体验，产品也不会放过啦。开始，对这个问题毫无头绪，毕竟这是在手机上出现的问题，没办法调试，只好去搜索答案，然后一个一个地尝试。但尝试了很多方法，都没有成功。其中有一个博客给了我启发，在ios下，ionic自带了一个页面切换的动画效果，而ios也有一个动画效果，这就是问题所在了。我只需要将ionic里的动画效果禁用即可。不过，禁用的方法有好几种，只有一种是可以的（对于我的app来说）。<br>在app.js中加入下面这句话。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ionicConfigProvider.views.transition(<span class=\"string\">'none'</span>);</div></pre></td></tr></table></figure></p>\n<p>另外在附上其他禁用右滑返回的方法<br>1 在app.js中加入<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ionicConfigProvider.views.swipeBackEnabled(<span class=\"literal\">false</span>);</div></pre></td></tr></table></figure></p>\n<p>2 在<code><ionic-view></ionic-view></code>中加入<code>can-swipe-back=”false”<br></code><br>3 使用指令<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">on-swipe-left</span>=<span class=\"string\">\"swipeleftAction()\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>4 使用监控路由的方式<br><a href=\"http://www.songliuchen.com/Article/58.aspx\">链接</a><br>5 通过取消ionic自带动画效果<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ion-view</span> <span class=\"attr\">view-title</span>=<span class=\"string\">\"个人中心\"</span> <span class=\"attr\">animation</span>=<span class=\"string\">\"no-animation\"</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ionicConfigProvider.views.transition(<span class=\"string\">'none'</span>);</div></pre></td></tr></table></figure>\n"},{"title":"jsclosure","date":"2016-12-31T03:58:22.000Z","_content":"闭包\n-----\n```javascript\nfunction outfun(){\n    var num=1;\n    return function infun(){\n        console.log(num++);\n    }\n}\nvar getnum=outfun();\ngetnum();\nconsole.log(num);\n```\n首先先声明一个函数outfun，在在其中定义一个变量num和一个函数infun,再将infun返回到函数外面（暴露到外部）。新声明个函数用来保存outfun的结果，也就是得到infun。此时的getnum方法就为\n```javascript\ngetnum=function(){\n    console.log(num++);\n}\n```\n注意这里的num是outfun中的私有变量，在outfun函数外是访问不到的。可以在outfun函数打印一下num，结果是undefined;\n\n这时候就形成了闭包，只有getnum才能访问到num这个变量。\n也就是闭包的好处，可以保护变量不被后面的代码影响，其缺点也显而易见了，js垃圾回收机制就无法回收内存了。","source":"_posts/jsclosure.md","raw":"---\ntitle: jsclosure\ndate: 2016-12-31 11:58:22\ntags: javascript\n---\n闭包\n-----\n```javascript\nfunction outfun(){\n    var num=1;\n    return function infun(){\n        console.log(num++);\n    }\n}\nvar getnum=outfun();\ngetnum();\nconsole.log(num);\n```\n首先先声明一个函数outfun，在在其中定义一个变量num和一个函数infun,再将infun返回到函数外面（暴露到外部）。新声明个函数用来保存outfun的结果，也就是得到infun。此时的getnum方法就为\n```javascript\ngetnum=function(){\n    console.log(num++);\n}\n```\n注意这里的num是outfun中的私有变量，在outfun函数外是访问不到的。可以在outfun函数打印一下num，结果是undefined;\n\n这时候就形成了闭包，只有getnum才能访问到num这个变量。\n也就是闭包的好处，可以保护变量不被后面的代码影响，其缺点也显而易见了，js垃圾回收机制就无法回收内存了。","slug":"jsclosure","published":1,"updated":"2016-12-31T04:28:47.739Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizfkde3s000c4cw5uszrgslp","content":"<h2 id=\"闭包\"><a href=\"#闭包\" class=\"headerlink\" title=\"闭包\"></a>闭包</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">outfun</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> num=<span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">infun</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(num++);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> getnum=outfun();</div><div class=\"line\">getnum();</div><div class=\"line\"><span class=\"built_in\">console</span>.log(num);</div></pre></td></tr></table></figure>\n<p>首先先声明一个函数outfun，在在其中定义一个变量num和一个函数infun,再将infun返回到函数外面（暴露到外部）。新声明个函数用来保存outfun的结果，也就是得到infun。此时的getnum方法就为<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">getnum=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(num++);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>注意这里的num是outfun中的私有变量，在outfun函数外是访问不到的。可以在outfun函数打印一下num，结果是undefined;</p>\n<p>这时候就形成了闭包，只有getnum才能访问到num这个变量。<br>也就是闭包的好处，可以保护变量不被后面的代码影响，其缺点也显而易见了，js垃圾回收机制就无法回收内存了。</p>\n","excerpt":"","more":"<h2 id=\"闭包\"><a href=\"#闭包\" class=\"headerlink\" title=\"闭包\"></a>闭包</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">outfun</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> num=<span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">infun</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(num++);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> getnum=outfun();</div><div class=\"line\">getnum();</div><div class=\"line\"><span class=\"built_in\">console</span>.log(num);</div></pre></td></tr></table></figure>\n<p>首先先声明一个函数outfun，在在其中定义一个变量num和一个函数infun,再将infun返回到函数外面（暴露到外部）。新声明个函数用来保存outfun的结果，也就是得到infun。此时的getnum方法就为<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">getnum=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(num++);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>注意这里的num是outfun中的私有变量，在outfun函数外是访问不到的。可以在outfun函数打印一下num，结果是undefined;</p>\n<p>这时候就形成了闭包，只有getnum才能访问到num这个变量。<br>也就是闭包的好处，可以保护变量不被后面的代码影响，其缺点也显而易见了，js垃圾回收机制就无法回收内存了。</p>\n"},{"title":"StaticStorage","date":"2016-12-27T14:04:39.000Z","_content":"\n1 github 静态页\n-----------------\ngithubpages搭配hexo，可以建立自己的博客，想要个性化一点，还可以绑定自己注册的域名。特别要注意的是因为github的服务器是在国外，也免去了备案的问题，所以只需要做一下域名解析就可以通过私有域名访问啦。\n[github pages](https://pages.github.com/)\n\n2 阿里云\n----------------\n阿里云对象存储OSS资源包\n相比于github静态页，它的空间可以选择大小，最大可以选择几百TB，不过是收费的，但是价格还是比较便宜的，40GB年也就9软妹币。如果在阿里云有ESC主机的话，在同一个局域网下，是不收流量费的。但它最大的问题是自定义域名是需要备案的。没备案域名就只能通过很长很长很长的域名来访问，这当然是不能接受的啦。我的解决办法是给它分配一个二级域名，当然土豪可以再注册个域名。\n\n3 七牛云\n----------------\n新用户免费10G空间，但自定义域名需要备案，且需要10元余额\n\n4 surge\n----------------\n有免费套餐和收费套餐，支持CDN，自定义域名，SSL等功能。不过是国外的，速度不一定行。非常类似githubpages。关键是国内可以访问\n[surge](https://surge.sh)\n\n5 亚马逊aws\n---------------\n新用户送一十二个月免费的免费套餐，但需要支付一美元验证用户（验证成功后退回），也就是说需要visa银行卡。\n\n6 Google Cloud Platform\n---------------\n同亚马逊需要验证信用卡账户，同时还需要科学上网。\n\n\n未完待续。。。。\n","source":"_posts/staticStorage.md","raw":"---\ntitle: StaticStorage\ndate: 2016-12-27 22:04:39\ntags: StaticStorage\n---\n\n1 github 静态页\n-----------------\ngithubpages搭配hexo，可以建立自己的博客，想要个性化一点，还可以绑定自己注册的域名。特别要注意的是因为github的服务器是在国外，也免去了备案的问题，所以只需要做一下域名解析就可以通过私有域名访问啦。\n[github pages](https://pages.github.com/)\n\n2 阿里云\n----------------\n阿里云对象存储OSS资源包\n相比于github静态页，它的空间可以选择大小，最大可以选择几百TB，不过是收费的，但是价格还是比较便宜的，40GB年也就9软妹币。如果在阿里云有ESC主机的话，在同一个局域网下，是不收流量费的。但它最大的问题是自定义域名是需要备案的。没备案域名就只能通过很长很长很长的域名来访问，这当然是不能接受的啦。我的解决办法是给它分配一个二级域名，当然土豪可以再注册个域名。\n\n3 七牛云\n----------------\n新用户免费10G空间，但自定义域名需要备案，且需要10元余额\n\n4 surge\n----------------\n有免费套餐和收费套餐，支持CDN，自定义域名，SSL等功能。不过是国外的，速度不一定行。非常类似githubpages。关键是国内可以访问\n[surge](https://surge.sh)\n\n5 亚马逊aws\n---------------\n新用户送一十二个月免费的免费套餐，但需要支付一美元验证用户（验证成功后退回），也就是说需要visa银行卡。\n\n6 Google Cloud Platform\n---------------\n同亚马逊需要验证信用卡账户，同时还需要科学上网。\n\n\n未完待续。。。。\n","slug":"staticStorage","published":1,"updated":"2017-01-15T04:54:44.457Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizfkde3t000e4cw5j3dsyrr2","content":"<h2 id=\"1-github-静态页\"><a href=\"#1-github-静态页\" class=\"headerlink\" title=\"1 github 静态页\"></a>1 github 静态页</h2><p>githubpages搭配hexo，可以建立自己的博客，想要个性化一点，还可以绑定自己注册的域名。特别要注意的是因为github的服务器是在国外，也免去了备案的问题，所以只需要做一下域名解析就可以通过私有域名访问啦。<br><a href=\"https://pages.github.com/\" target=\"_blank\" rel=\"external\">github pages</a></p>\n<h2 id=\"2-阿里云\"><a href=\"#2-阿里云\" class=\"headerlink\" title=\"2 阿里云\"></a>2 阿里云</h2><p>阿里云对象存储OSS资源包<br>相比于github静态页，它的空间可以选择大小，最大可以选择几百TB，不过是收费的，但是价格还是比较便宜的，40GB年也就9软妹币。如果在阿里云有ESC主机的话，在同一个局域网下，是不收流量费的。但它最大的问题是自定义域名是需要备案的。没备案域名就只能通过很长很长很长的域名来访问，这当然是不能接受的啦。我的解决办法是给它分配一个二级域名，当然土豪可以再注册个域名。</p>\n<h2 id=\"3-七牛云\"><a href=\"#3-七牛云\" class=\"headerlink\" title=\"3 七牛云\"></a>3 七牛云</h2><p>新用户免费10G空间，但自定义域名需要备案，且需要10元余额</p>\n<h2 id=\"4-surge\"><a href=\"#4-surge\" class=\"headerlink\" title=\"4 surge\"></a>4 surge</h2><p>有免费套餐和收费套餐，支持CDN，自定义域名，SSL等功能。不过是国外的，速度不一定行。非常类似githubpages。关键是国内可以访问<br><a href=\"https://surge.sh\" target=\"_blank\" rel=\"external\">surge</a></p>\n<h2 id=\"5-亚马逊aws\"><a href=\"#5-亚马逊aws\" class=\"headerlink\" title=\"5 亚马逊aws\"></a>5 亚马逊aws</h2><p>新用户送一十二个月免费的免费套餐，但需要支付一美元验证用户（验证成功后退回），也就是说需要visa银行卡。</p>\n<h2 id=\"6-Google-Cloud-Platform\"><a href=\"#6-Google-Cloud-Platform\" class=\"headerlink\" title=\"6 Google Cloud Platform\"></a>6 Google Cloud Platform</h2><p>同亚马逊需要验证信用卡账户，同时还需要科学上网。</p>\n<p>未完待续。。。。</p>\n","excerpt":"","more":"<h2 id=\"1-github-静态页\"><a href=\"#1-github-静态页\" class=\"headerlink\" title=\"1 github 静态页\"></a>1 github 静态页</h2><p>githubpages搭配hexo，可以建立自己的博客，想要个性化一点，还可以绑定自己注册的域名。特别要注意的是因为github的服务器是在国外，也免去了备案的问题，所以只需要做一下域名解析就可以通过私有域名访问啦。<br><a href=\"https://pages.github.com/\">github pages</a></p>\n<h2 id=\"2-阿里云\"><a href=\"#2-阿里云\" class=\"headerlink\" title=\"2 阿里云\"></a>2 阿里云</h2><p>阿里云对象存储OSS资源包<br>相比于github静态页，它的空间可以选择大小，最大可以选择几百TB，不过是收费的，但是价格还是比较便宜的，40GB年也就9软妹币。如果在阿里云有ESC主机的话，在同一个局域网下，是不收流量费的。但它最大的问题是自定义域名是需要备案的。没备案域名就只能通过很长很长很长的域名来访问，这当然是不能接受的啦。我的解决办法是给它分配一个二级域名，当然土豪可以再注册个域名。</p>\n<h2 id=\"3-七牛云\"><a href=\"#3-七牛云\" class=\"headerlink\" title=\"3 七牛云\"></a>3 七牛云</h2><p>新用户免费10G空间，但自定义域名需要备案，且需要10元余额</p>\n<h2 id=\"4-surge\"><a href=\"#4-surge\" class=\"headerlink\" title=\"4 surge\"></a>4 surge</h2><p>有免费套餐和收费套餐，支持CDN，自定义域名，SSL等功能。不过是国外的，速度不一定行。非常类似githubpages。关键是国内可以访问<br><a href=\"https://surge.sh\">surge</a></p>\n<h2 id=\"5-亚马逊aws\"><a href=\"#5-亚马逊aws\" class=\"headerlink\" title=\"5 亚马逊aws\"></a>5 亚马逊aws</h2><p>新用户送一十二个月免费的免费套餐，但需要支付一美元验证用户（验证成功后退回），也就是说需要visa银行卡。</p>\n<h2 id=\"6-Google-Cloud-Platform\"><a href=\"#6-Google-Cloud-Platform\" class=\"headerlink\" title=\"6 Google Cloud Platform\"></a>6 Google Cloud Platform</h2><p>同亚马逊需要验证信用卡账户，同时还需要科学上网。</p>\n<p>未完待续。。。。</p>\n"},{"title":"双路由器无线桥接","date":"2017-01-09T14:03:28.000Z","_content":"\n现在的路由器不管有多少天线，但是总会有覆盖不到的死角。因此，还是需要配置一个路由中继来增强网络\n\n1 材料\n----\n带wds无线桥接功能的两台路由器，笔记本或手机一台。\n\n2 设置主路由器\n----\n主路由器成功链接猫后，打开无线设置，设置一个固定的信道。保存重启路由\n![信道设置](http://ojioqa2pk.bkt.clouddn.com/QQ%E5%9B%BE%E7%89%8720170109222613.png)\n\n记录主路由器的DNS服务器地址，以便设置副路由器\n![DNS服务器地址](http://ojioqa2pk.bkt.clouddn.com/QQ%E5%9B%BE%E7%89%8720170109222622.png)\n\n3 设置副路由器\n---\n设置副路由器的LAN口地址，将主副路由的LAN口地址分开，防止冲突无法进入管理界面\n![LAN口设置](http://ojioqa2pk.bkt.clouddn.com/QQ%E5%9B%BE%E7%89%8720170109224814.png)\n\n打开副路由器的无线设置，开启WDS功能。然后扫描无线网络，再选定主路由器的无线信号，输入密钥，保存，重启路由\n![副路由无线设置](http://ojioqa2pk.bkt.clouddn.com/QQ%E5%9B%BE%E7%89%8720170109222637.png)\n\n关闭副路由器的DHCP服务器，防止主副路由ip地址分配冲突\n![DHCP服务器设置](http://ojioqa2pk.bkt.clouddn.com/QQ%E5%9B%BE%E7%89%8720170109222659.png)\n\n\n","source":"_posts/route.md","raw":"---\ntitle: 双路由器无线桥接\ndate: 2017-01-09 22:03:28\ntags: 路由\n---\n\n现在的路由器不管有多少天线，但是总会有覆盖不到的死角。因此，还是需要配置一个路由中继来增强网络\n\n1 材料\n----\n带wds无线桥接功能的两台路由器，笔记本或手机一台。\n\n2 设置主路由器\n----\n主路由器成功链接猫后，打开无线设置，设置一个固定的信道。保存重启路由\n![信道设置](http://ojioqa2pk.bkt.clouddn.com/QQ%E5%9B%BE%E7%89%8720170109222613.png)\n\n记录主路由器的DNS服务器地址，以便设置副路由器\n![DNS服务器地址](http://ojioqa2pk.bkt.clouddn.com/QQ%E5%9B%BE%E7%89%8720170109222622.png)\n\n3 设置副路由器\n---\n设置副路由器的LAN口地址，将主副路由的LAN口地址分开，防止冲突无法进入管理界面\n![LAN口设置](http://ojioqa2pk.bkt.clouddn.com/QQ%E5%9B%BE%E7%89%8720170109224814.png)\n\n打开副路由器的无线设置，开启WDS功能。然后扫描无线网络，再选定主路由器的无线信号，输入密钥，保存，重启路由\n![副路由无线设置](http://ojioqa2pk.bkt.clouddn.com/QQ%E5%9B%BE%E7%89%8720170109222637.png)\n\n关闭副路由器的DHCP服务器，防止主副路由ip地址分配冲突\n![DHCP服务器设置](http://ojioqa2pk.bkt.clouddn.com/QQ%E5%9B%BE%E7%89%8720170109222659.png)\n\n\n","slug":"route","published":1,"updated":"2017-01-09T14:49:06.575Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizfkde3u000g4cw5ljmat9ql","content":"<p>现在的路由器不管有多少天线，但是总会有覆盖不到的死角。因此，还是需要配置一个路由中继来增强网络</p>\n<h2 id=\"1-材料\"><a href=\"#1-材料\" class=\"headerlink\" title=\"1 材料\"></a>1 材料</h2><p>带wds无线桥接功能的两台路由器，笔记本或手机一台。</p>\n<h2 id=\"2-设置主路由器\"><a href=\"#2-设置主路由器\" class=\"headerlink\" title=\"2 设置主路由器\"></a>2 设置主路由器</h2><p>主路由器成功链接猫后，打开无线设置，设置一个固定的信道。保存重启路由<br><img src=\"http://ojioqa2pk.bkt.clouddn.com/QQ%E5%9B%BE%E7%89%8720170109222613.png\" alt=\"信道设置\"></p>\n<p>记录主路由器的DNS服务器地址，以便设置副路由器<br><img src=\"http://ojioqa2pk.bkt.clouddn.com/QQ%E5%9B%BE%E7%89%8720170109222622.png\" alt=\"DNS服务器地址\"></p>\n<h2 id=\"3-设置副路由器\"><a href=\"#3-设置副路由器\" class=\"headerlink\" title=\"3 设置副路由器\"></a>3 设置副路由器</h2><p>设置副路由器的LAN口地址，将主副路由的LAN口地址分开，防止冲突无法进入管理界面<br><img src=\"http://ojioqa2pk.bkt.clouddn.com/QQ%E5%9B%BE%E7%89%8720170109224814.png\" alt=\"LAN口设置\"></p>\n<p>打开副路由器的无线设置，开启WDS功能。然后扫描无线网络，再选定主路由器的无线信号，输入密钥，保存，重启路由<br><img src=\"http://ojioqa2pk.bkt.clouddn.com/QQ%E5%9B%BE%E7%89%8720170109222637.png\" alt=\"副路由无线设置\"></p>\n<p>关闭副路由器的DHCP服务器，防止主副路由ip地址分配冲突<br><img src=\"http://ojioqa2pk.bkt.clouddn.com/QQ%E5%9B%BE%E7%89%8720170109222659.png\" alt=\"DHCP服务器设置\"></p>\n","excerpt":"","more":"<p>现在的路由器不管有多少天线，但是总会有覆盖不到的死角。因此，还是需要配置一个路由中继来增强网络</p>\n<h2 id=\"1-材料\"><a href=\"#1-材料\" class=\"headerlink\" title=\"1 材料\"></a>1 材料</h2><p>带wds无线桥接功能的两台路由器，笔记本或手机一台。</p>\n<h2 id=\"2-设置主路由器\"><a href=\"#2-设置主路由器\" class=\"headerlink\" title=\"2 设置主路由器\"></a>2 设置主路由器</h2><p>主路由器成功链接猫后，打开无线设置，设置一个固定的信道。保存重启路由<br><img src=\"http://ojioqa2pk.bkt.clouddn.com/QQ%E5%9B%BE%E7%89%8720170109222613.png\" alt=\"信道设置\"></p>\n<p>记录主路由器的DNS服务器地址，以便设置副路由器<br><img src=\"http://ojioqa2pk.bkt.clouddn.com/QQ%E5%9B%BE%E7%89%8720170109222622.png\" alt=\"DNS服务器地址\"></p>\n<h2 id=\"3-设置副路由器\"><a href=\"#3-设置副路由器\" class=\"headerlink\" title=\"3 设置副路由器\"></a>3 设置副路由器</h2><p>设置副路由器的LAN口地址，将主副路由的LAN口地址分开，防止冲突无法进入管理界面<br><img src=\"http://ojioqa2pk.bkt.clouddn.com/QQ%E5%9B%BE%E7%89%8720170109224814.png\" alt=\"LAN口设置\"></p>\n<p>打开副路由器的无线设置，开启WDS功能。然后扫描无线网络，再选定主路由器的无线信号，输入密钥，保存，重启路由<br><img src=\"http://ojioqa2pk.bkt.clouddn.com/QQ%E5%9B%BE%E7%89%8720170109222637.png\" alt=\"副路由无线设置\"></p>\n<p>关闭副路由器的DHCP服务器，防止主副路由ip地址分配冲突<br><img src=\"http://ojioqa2pk.bkt.clouddn.com/QQ%E5%9B%BE%E7%89%8720170109222659.png\" alt=\"DHCP服务器设置\"></p>\n"},{"title":"landingpage","date":"2017-01-04T12:59:24.000Z","_content":"\n最近一直都在写着陆页(landingpage)，写多了也就烦了，每次新建项目都需要复制文件或者去下载各种各样的包。这纯粹是体力活，没有技术含量，在浪费时间。之前有在webapp的项目中看到，可以用自动化的工具来新建项目，所以突发奇想，想用自动化工具来写着陆页。所幸，在yeoman上找到了相应的generator,安装完成，终于从石器时代进化到现代啦！\n\n0\n---\n既然用到了自动化那就肯定得要有node环境啦，这是我本地的环境。\n```code\nC:\\Users\\jinge>node -v\nv6.9.1\nC:\\Users\\jinge>npm -v\n3.10.8\n```\n\n1\n---\n第一步安装yeoman，bower和gulp\n```code\nnpm install -g yo bower gulp\n```\n安装完检查\n```code\nC:\\Users\\jinge>gulp -v\n[21:20:47] CLI version 3.9.1\n\nC:\\Users\\jinge>bower -v\n1.8.0\n\nC:\\Users\\jinge>yo doctor\n\nYeoman Doctor\nRunning sanity checks on your system\n\n√ Global configuration file is valid\n√ NODE_PATH matches the npm root\n√ Node.js version\n√ No .bowerrc file in home directory\n√ No .yo-rc.json file in home directory\n√ npm version\n\nEverything looks all right!\n```\n\n2\n---\n安装完成没有问题后，下载generator\n```code\nnpm install -g generator-yeomify-landing\n```\n安装完成后\n```code\nyo yeomify-landing\n```\n创建项目\n```code\nC:\\Users\\jinge\\work\\landing>yo yeomify-landing\n\n     _-----_     ╭──────────────────────────╮\n    |       |    │   Yeoman generator for   │\n    |--(o)--|    │  landing project powered │\n   `---------´   │         by Gulp!         │\n    ( _´U`_ )    ╰──────────────────────────╯\n    /___A___\\   /\n     |  ~  |\n   __'.___.'__\n ´   `  |° ´ Y `\n\n? What is your app's name? landing\n? What is your app's description? landing\n? Would you install pug as template engine? No\n? What css preprocessor would you use? stylus\n? Would you install modernizr and normalize libraries? Yes\n```\n然后输入\n```code\nnpm install\n```\n在bower.js中设置所需的jquery版本和其他包版本。\n再用bower安装这些包\n```code\nbower install\n```\n\n3\n---\n<code>gulp watch</code> 在app文件夹下面启动一个watcher;\n<code>gulp build</code> 将项目导出到dist文件夹下;\n<code>gulp build --abspaths</code> 使用绝对路径把项目文件导出到dist文件夹中(css and js files);\n<code>gulp build:watch</code> 在dist文件夹下面启动一个watcher;\n<code>gulp build:clean</code> 删除dist和.tmp两个文件夹。（dist为输出文件夹，.tmp为watch产生的临时文件夹）\n\nwatch项目后，就可以在浏览器中访问项目，默认的端口是3000\n\n最后附上generator的github[地址](https://github.com/helloilya/generator-yeomify-landing)\n","source":"_posts/landingpage.md","raw":"---\ntitle: landingpage\ndate: 2017-01-04 20:59:24\ntags: yeoman,gulp,bower,landingpage\n---\n\n最近一直都在写着陆页(landingpage)，写多了也就烦了，每次新建项目都需要复制文件或者去下载各种各样的包。这纯粹是体力活，没有技术含量，在浪费时间。之前有在webapp的项目中看到，可以用自动化的工具来新建项目，所以突发奇想，想用自动化工具来写着陆页。所幸，在yeoman上找到了相应的generator,安装完成，终于从石器时代进化到现代啦！\n\n0\n---\n既然用到了自动化那就肯定得要有node环境啦，这是我本地的环境。\n```code\nC:\\Users\\jinge>node -v\nv6.9.1\nC:\\Users\\jinge>npm -v\n3.10.8\n```\n\n1\n---\n第一步安装yeoman，bower和gulp\n```code\nnpm install -g yo bower gulp\n```\n安装完检查\n```code\nC:\\Users\\jinge>gulp -v\n[21:20:47] CLI version 3.9.1\n\nC:\\Users\\jinge>bower -v\n1.8.0\n\nC:\\Users\\jinge>yo doctor\n\nYeoman Doctor\nRunning sanity checks on your system\n\n√ Global configuration file is valid\n√ NODE_PATH matches the npm root\n√ Node.js version\n√ No .bowerrc file in home directory\n√ No .yo-rc.json file in home directory\n√ npm version\n\nEverything looks all right!\n```\n\n2\n---\n安装完成没有问题后，下载generator\n```code\nnpm install -g generator-yeomify-landing\n```\n安装完成后\n```code\nyo yeomify-landing\n```\n创建项目\n```code\nC:\\Users\\jinge\\work\\landing>yo yeomify-landing\n\n     _-----_     ╭──────────────────────────╮\n    |       |    │   Yeoman generator for   │\n    |--(o)--|    │  landing project powered │\n   `---------´   │         by Gulp!         │\n    ( _´U`_ )    ╰──────────────────────────╯\n    /___A___\\   /\n     |  ~  |\n   __'.___.'__\n ´   `  |° ´ Y `\n\n? What is your app's name? landing\n? What is your app's description? landing\n? Would you install pug as template engine? No\n? What css preprocessor would you use? stylus\n? Would you install modernizr and normalize libraries? Yes\n```\n然后输入\n```code\nnpm install\n```\n在bower.js中设置所需的jquery版本和其他包版本。\n再用bower安装这些包\n```code\nbower install\n```\n\n3\n---\n<code>gulp watch</code> 在app文件夹下面启动一个watcher;\n<code>gulp build</code> 将项目导出到dist文件夹下;\n<code>gulp build --abspaths</code> 使用绝对路径把项目文件导出到dist文件夹中(css and js files);\n<code>gulp build:watch</code> 在dist文件夹下面启动一个watcher;\n<code>gulp build:clean</code> 删除dist和.tmp两个文件夹。（dist为输出文件夹，.tmp为watch产生的临时文件夹）\n\nwatch项目后，就可以在浏览器中访问项目，默认的端口是3000\n\n最后附上generator的github[地址](https://github.com/helloilya/generator-yeomify-landing)\n","slug":"landingpage","published":1,"updated":"2017-01-15T04:54:20.772Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizfkde3x000i4cw5gsbqk3ib","content":"<p>最近一直都在写着陆页(landingpage)，写多了也就烦了，每次新建项目都需要复制文件或者去下载各种各样的包。这纯粹是体力活，没有技术含量，在浪费时间。之前有在webapp的项目中看到，可以用自动化的工具来新建项目，所以突发奇想，想用自动化工具来写着陆页。所幸，在yeoman上找到了相应的generator,安装完成，终于从石器时代进化到现代啦！</p>\n<h2 id=\"0\"><a href=\"#0\" class=\"headerlink\" title=\"0\"></a>0</h2><p>既然用到了自动化那就肯定得要有node环境啦，这是我本地的环境。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">C:\\Users\\jinge&gt;node -v</div><div class=\"line\">v6.9.1</div><div class=\"line\">C:\\Users\\jinge&gt;npm -v</div><div class=\"line\">3.10.8</div></pre></td></tr></table></figure></p>\n<h2 id=\"1\"><a href=\"#1\" class=\"headerlink\" title=\"1\"></a>1</h2><p>第一步安装yeoman，bower和gulp<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install -g yo bower gulp</div></pre></td></tr></table></figure></p>\n<p>安装完检查<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">C:\\Users\\jinge&gt;gulp -v</div><div class=\"line\">[21:20:47] CLI version 3.9.1</div><div class=\"line\"></div><div class=\"line\">C:\\Users\\jinge&gt;bower -v</div><div class=\"line\">1.8.0</div><div class=\"line\"></div><div class=\"line\">C:\\Users\\jinge&gt;yo doctor</div><div class=\"line\"></div><div class=\"line\">Yeoman Doctor</div><div class=\"line\">Running sanity checks on your system</div><div class=\"line\"></div><div class=\"line\">√ Global configuration file is valid</div><div class=\"line\">√ NODE_PATH matches the npm root</div><div class=\"line\">√ Node.js version</div><div class=\"line\">√ No .bowerrc file in home directory</div><div class=\"line\">√ No .yo-rc.json file in home directory</div><div class=\"line\">√ npm version</div><div class=\"line\"></div><div class=\"line\">Everything looks all right!</div></pre></td></tr></table></figure></p>\n<h2 id=\"2\"><a href=\"#2\" class=\"headerlink\" title=\"2\"></a>2</h2><p>安装完成没有问题后，下载generator<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install -g generator-yeomify-landing</div></pre></td></tr></table></figure></p>\n<p>安装完成后<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">yo yeomify-landing</div></pre></td></tr></table></figure></p>\n<p>创建项目<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">C:\\Users\\jinge\\work\\landing&gt;yo yeomify-landing</div><div class=\"line\"></div><div class=\"line\">     _-----_     ╭──────────────────────────╮</div><div class=\"line\">    |       |    │   Yeoman generator for   │</div><div class=\"line\">    |--(o)--|    │  landing project powered │</div><div class=\"line\">   `---------´   │         by Gulp!         │</div><div class=\"line\">    ( _´U`_ )    ╰──────────────────────────╯</div><div class=\"line\">    /___A___\\   /</div><div class=\"line\">     |  ~  |</div><div class=\"line\">   __&apos;.___.&apos;__</div><div class=\"line\"> ´   `  |° ´ Y `</div><div class=\"line\"></div><div class=\"line\">? What is your app&apos;s name? landing</div><div class=\"line\">? What is your app&apos;s description? landing</div><div class=\"line\">? Would you install pug as template engine? No</div><div class=\"line\">? What css preprocessor would you use? stylus</div><div class=\"line\">? Would you install modernizr and normalize libraries? Yes</div></pre></td></tr></table></figure></p>\n<p>然后输入<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install</div></pre></td></tr></table></figure></p>\n<p>在bower.js中设置所需的jquery版本和其他包版本。<br>再用bower安装这些包<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">bower install</div></pre></td></tr></table></figure></p>\n<h2 id=\"3\"><a href=\"#3\" class=\"headerlink\" title=\"3\"></a>3</h2><p><code>gulp watch</code> 在app文件夹下面启动一个watcher;<br><code>gulp build</code> 将项目导出到dist文件夹下;<br><code>gulp build –abspaths</code> 使用绝对路径把项目文件导出到dist文件夹中(css and js files);<br><code>gulp build:watch</code> 在dist文件夹下面启动一个watcher;<br><code>gulp build:clean</code> 删除dist和.tmp两个文件夹。（dist为输出文件夹，.tmp为watch产生的临时文件夹）</p>\n<p>watch项目后，就可以在浏览器中访问项目，默认的端口是3000</p>\n<p>最后附上generator的github<a href=\"https://github.com/helloilya/generator-yeomify-landing\" target=\"_blank\" rel=\"external\">地址</a></p>\n","excerpt":"","more":"<p>最近一直都在写着陆页(landingpage)，写多了也就烦了，每次新建项目都需要复制文件或者去下载各种各样的包。这纯粹是体力活，没有技术含量，在浪费时间。之前有在webapp的项目中看到，可以用自动化的工具来新建项目，所以突发奇想，想用自动化工具来写着陆页。所幸，在yeoman上找到了相应的generator,安装完成，终于从石器时代进化到现代啦！</p>\n<h2 id=\"0\"><a href=\"#0\" class=\"headerlink\" title=\"0\"></a>0</h2><p>既然用到了自动化那就肯定得要有node环境啦，这是我本地的环境。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">C:\\Users\\jinge&gt;node -v</div><div class=\"line\">v6.9.1</div><div class=\"line\">C:\\Users\\jinge&gt;npm -v</div><div class=\"line\">3.10.8</div></pre></td></tr></table></figure></p>\n<h2 id=\"1\"><a href=\"#1\" class=\"headerlink\" title=\"1\"></a>1</h2><p>第一步安装yeoman，bower和gulp<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install -g yo bower gulp</div></pre></td></tr></table></figure></p>\n<p>安装完检查<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">C:\\Users\\jinge&gt;gulp -v</div><div class=\"line\">[21:20:47] CLI version 3.9.1</div><div class=\"line\"></div><div class=\"line\">C:\\Users\\jinge&gt;bower -v</div><div class=\"line\">1.8.0</div><div class=\"line\"></div><div class=\"line\">C:\\Users\\jinge&gt;yo doctor</div><div class=\"line\"></div><div class=\"line\">Yeoman Doctor</div><div class=\"line\">Running sanity checks on your system</div><div class=\"line\"></div><div class=\"line\">√ Global configuration file is valid</div><div class=\"line\">√ NODE_PATH matches the npm root</div><div class=\"line\">√ Node.js version</div><div class=\"line\">√ No .bowerrc file in home directory</div><div class=\"line\">√ No .yo-rc.json file in home directory</div><div class=\"line\">√ npm version</div><div class=\"line\"></div><div class=\"line\">Everything looks all right!</div></pre></td></tr></table></figure></p>\n<h2 id=\"2\"><a href=\"#2\" class=\"headerlink\" title=\"2\"></a>2</h2><p>安装完成没有问题后，下载generator<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install -g generator-yeomify-landing</div></pre></td></tr></table></figure></p>\n<p>安装完成后<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">yo yeomify-landing</div></pre></td></tr></table></figure></p>\n<p>创建项目<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">C:\\Users\\jinge\\work\\landing&gt;yo yeomify-landing</div><div class=\"line\"></div><div class=\"line\">     _-----_     ╭──────────────────────────╮</div><div class=\"line\">    |       |    │   Yeoman generator for   │</div><div class=\"line\">    |--(o)--|    │  landing project powered │</div><div class=\"line\">   `---------´   │         by Gulp!         │</div><div class=\"line\">    ( _´U`_ )    ╰──────────────────────────╯</div><div class=\"line\">    /___A___\\   /</div><div class=\"line\">     |  ~  |</div><div class=\"line\">   __&apos;.___.&apos;__</div><div class=\"line\"> ´   `  |° ´ Y `</div><div class=\"line\"></div><div class=\"line\">? What is your app&apos;s name? landing</div><div class=\"line\">? What is your app&apos;s description? landing</div><div class=\"line\">? Would you install pug as template engine? No</div><div class=\"line\">? What css preprocessor would you use? stylus</div><div class=\"line\">? Would you install modernizr and normalize libraries? Yes</div></pre></td></tr></table></figure></p>\n<p>然后输入<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install</div></pre></td></tr></table></figure></p>\n<p>在bower.js中设置所需的jquery版本和其他包版本。<br>再用bower安装这些包<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">bower install</div></pre></td></tr></table></figure></p>\n<h2 id=\"3\"><a href=\"#3\" class=\"headerlink\" title=\"3\"></a>3</h2><p><code>gulp watch</code> 在app文件夹下面启动一个watcher;<br><code>gulp build</code> 将项目导出到dist文件夹下;<br><code>gulp build –abspaths</code> 使用绝对路径把项目文件导出到dist文件夹中(css and js files);<br><code>gulp build:watch</code> 在dist文件夹下面启动一个watcher;<br><code>gulp build:clean</code> 删除dist和.tmp两个文件夹。（dist为输出文件夹，.tmp为watch产生的临时文件夹）</p>\n<p>watch项目后，就可以在浏览器中访问项目，默认的端口是3000</p>\n<p>最后附上generator的github<a href=\"https://github.com/helloilya/generator-yeomify-landing\">地址</a></p>\n"},{"title":"less","date":"2016-12-29T14:19:28.000Z","_content":"\n开始工作到现在写了几个静态页面，尝试使用Less来编写样式。原本是想使用less来减少样式代码量，可能是水平有限，写出来的less比css还要多，但less还是使我提高了效率。\n毕竟自动编译出来的代码，不用再去格式化，来迎合代码规范。记录一下使用的心得。\n\n1 定义常量\n--------\nless可以使用<code>@常量名</code>来存储页面上元素信息。\n这就可以在切图时，将页面的页面宽度和背景颜色，等等信息先存储起来，不用在码代码时，再去psd中取色，量长度等等。\n\n```code\n@pagewidth:980px;\n@bgcolor:#999999\n```\n还有一种方式就是使用class类来存储\n```css\n.title{\n    font-size:16px;\n    color:#666;\n    font-family:\"Microsoft YaHei\";\n    font-weight:normal;\n}\n```\n引用的时候\n```code\n.element{\n    width:@pagewidth;\n    background:@bgcolor;\n    .title;\n}\n```\n\n2 css的混入\n------\n在css中编写父元素和子元素需要写两个选择器写在两个{}中，其层级关系也没不明显。\n在less中就可以混入css，就是在父元素的样式{}中，再使用选择器来选择子元素，如下代码\n\n```code\n.father{\n    width:@pagewidth;\n    height:200px;\n    .child{\n        width:100px;\n        height:200px;\n    }\n}\n```\n输出成css代码就是\n```css\n.father{\n    width:980px;\n    height:200px;\n}\n.father .child{\n    width:100px;\n    height:200px;\n}\n```\n在css中可以<code>.father>div</code>来获取子元素，在less中就可以使用&符号来链接混入代码的选择器\n```code\n.father{\n    width:@pagewidth;\n    &>div{\n        height:200px;\n    }\n}\n```\n输出css\n```css\n.father{\n    width:980px;\n}\n.father>div{\n    height:200px;\n}\n```\n\n3 运算\n-----\n在less中任何数字（包括颜色）是可以进行运算的，比如高度宽度等等。运算是支持+-x/等等的\n```code\n@color:#111;\n.elem{\n    width:100 + 30px;\n    height:100 * 2 px;\n    color:@color*2;\n}\n```\ncss输出\n```css\n.elem{\n    width:130px;\n    height:200px;\n    color:#222;\n}\n```\n\n4 函数\n----------\n在less中你可以定义一个函数，然后再调用它。\n```code\n.setborderradius(@px){\n    border-radius:@px;\n    -webkit-border-radius:@px;\n    -moz-border-radius:@px;\n    -o-border-radius:@px;\n}\n.elem{\n    .setborderradius(5px);\n}\n```\ncss输出\n```css\n.elem{\n    border-raidus:5px;\n    -webkit-border-radius:5px;\n    -moz-border-radius:5px;\n    -o-border-radius:5px;\n}\n```","source":"_posts/less.md","raw":"---\ntitle: less\ndate: 2016-12-29 22:19:28\ntags: less base\n---\n\n开始工作到现在写了几个静态页面，尝试使用Less来编写样式。原本是想使用less来减少样式代码量，可能是水平有限，写出来的less比css还要多，但less还是使我提高了效率。\n毕竟自动编译出来的代码，不用再去格式化，来迎合代码规范。记录一下使用的心得。\n\n1 定义常量\n--------\nless可以使用<code>@常量名</code>来存储页面上元素信息。\n这就可以在切图时，将页面的页面宽度和背景颜色，等等信息先存储起来，不用在码代码时，再去psd中取色，量长度等等。\n\n```code\n@pagewidth:980px;\n@bgcolor:#999999\n```\n还有一种方式就是使用class类来存储\n```css\n.title{\n    font-size:16px;\n    color:#666;\n    font-family:\"Microsoft YaHei\";\n    font-weight:normal;\n}\n```\n引用的时候\n```code\n.element{\n    width:@pagewidth;\n    background:@bgcolor;\n    .title;\n}\n```\n\n2 css的混入\n------\n在css中编写父元素和子元素需要写两个选择器写在两个{}中，其层级关系也没不明显。\n在less中就可以混入css，就是在父元素的样式{}中，再使用选择器来选择子元素，如下代码\n\n```code\n.father{\n    width:@pagewidth;\n    height:200px;\n    .child{\n        width:100px;\n        height:200px;\n    }\n}\n```\n输出成css代码就是\n```css\n.father{\n    width:980px;\n    height:200px;\n}\n.father .child{\n    width:100px;\n    height:200px;\n}\n```\n在css中可以<code>.father>div</code>来获取子元素，在less中就可以使用&符号来链接混入代码的选择器\n```code\n.father{\n    width:@pagewidth;\n    &>div{\n        height:200px;\n    }\n}\n```\n输出css\n```css\n.father{\n    width:980px;\n}\n.father>div{\n    height:200px;\n}\n```\n\n3 运算\n-----\n在less中任何数字（包括颜色）是可以进行运算的，比如高度宽度等等。运算是支持+-x/等等的\n```code\n@color:#111;\n.elem{\n    width:100 + 30px;\n    height:100 * 2 px;\n    color:@color*2;\n}\n```\ncss输出\n```css\n.elem{\n    width:130px;\n    height:200px;\n    color:#222;\n}\n```\n\n4 函数\n----------\n在less中你可以定义一个函数，然后再调用它。\n```code\n.setborderradius(@px){\n    border-radius:@px;\n    -webkit-border-radius:@px;\n    -moz-border-radius:@px;\n    -o-border-radius:@px;\n}\n.elem{\n    .setborderradius(5px);\n}\n```\ncss输出\n```css\n.elem{\n    border-raidus:5px;\n    -webkit-border-radius:5px;\n    -moz-border-radius:5px;\n    -o-border-radius:5px;\n}\n```","slug":"less","published":1,"updated":"2016-12-31T03:19:08.191Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizfkde41000k4cw5klu05eg7","content":"<p>开始工作到现在写了几个静态页面，尝试使用Less来编写样式。原本是想使用less来减少样式代码量，可能是水平有限，写出来的less比css还要多，但less还是使我提高了效率。<br>毕竟自动编译出来的代码，不用再去格式化，来迎合代码规范。记录一下使用的心得。</p>\n<h2 id=\"1-定义常量\"><a href=\"#1-定义常量\" class=\"headerlink\" title=\"1 定义常量\"></a>1 定义常量</h2><p>less可以使用<code>@常量名</code>来存储页面上元素信息。<br>这就可以在切图时，将页面的页面宽度和背景颜色，等等信息先存储起来，不用在码代码时，再去psd中取色，量长度等等。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">@pagewidth:980px;</div><div class=\"line\">@bgcolor:#999999</div></pre></td></tr></table></figure>\n<p>还有一种方式就是使用class类来存储<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.title</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">font-size</span>:<span class=\"number\">16px</span>;</div><div class=\"line\">    <span class=\"attribute\">color</span>:<span class=\"number\">#666</span>;</div><div class=\"line\">    <span class=\"attribute\">font-family</span>:<span class=\"string\">\"Microsoft YaHei\"</span>;</div><div class=\"line\">    <span class=\"attribute\">font-weight</span>:normal;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>引用的时候<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">.element&#123;</div><div class=\"line\">    width:@pagewidth;</div><div class=\"line\">    background:@bgcolor;</div><div class=\"line\">    .title;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"2-css的混入\"><a href=\"#2-css的混入\" class=\"headerlink\" title=\"2 css的混入\"></a>2 css的混入</h2><p>在css中编写父元素和子元素需要写两个选择器写在两个{}中，其层级关系也没不明显。<br>在less中就可以混入css，就是在父元素的样式{}中，再使用选择器来选择子元素，如下代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">.father&#123;</div><div class=\"line\">    width:@pagewidth;</div><div class=\"line\">    height:200px;</div><div class=\"line\">    .child&#123;</div><div class=\"line\">        width:100px;</div><div class=\"line\">        height:200px;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>输出成css代码就是<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.father</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">width</span>:<span class=\"number\">980px</span>;</div><div class=\"line\">    <span class=\"attribute\">height</span>:<span class=\"number\">200px</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.father</span> <span class=\"selector-class\">.child</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">width</span>:<span class=\"number\">100px</span>;</div><div class=\"line\">    <span class=\"attribute\">height</span>:<span class=\"number\">200px</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>在css中可以<code>.father&gt;div</code>来获取子元素，在less中就可以使用&amp;符号来链接混入代码的选择器<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">.father&#123;</div><div class=\"line\">    width:@pagewidth;</div><div class=\"line\">    &amp;&gt;div&#123;</div><div class=\"line\">        height:200px;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>输出css<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.father</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">width</span>:<span class=\"number\">980px</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.father</span>&gt;<span class=\"selector-tag\">div</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">height</span>:<span class=\"number\">200px</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"3-运算\"><a href=\"#3-运算\" class=\"headerlink\" title=\"3 运算\"></a>3 运算</h2><p>在less中任何数字（包括颜色）是可以进行运算的，比如高度宽度等等。运算是支持+-x/等等的<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">@color:#111;</div><div class=\"line\">.elem&#123;</div><div class=\"line\">    width:100 + 30px;</div><div class=\"line\">    height:100 * 2 px;</div><div class=\"line\">    color:@color*2;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>css输出<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.elem</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">width</span>:<span class=\"number\">130px</span>;</div><div class=\"line\">    <span class=\"attribute\">height</span>:<span class=\"number\">200px</span>;</div><div class=\"line\">    <span class=\"attribute\">color</span>:<span class=\"number\">#222</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"4-函数\"><a href=\"#4-函数\" class=\"headerlink\" title=\"4 函数\"></a>4 函数</h2><p>在less中你可以定义一个函数，然后再调用它。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">.setborderradius(@px)&#123;</div><div class=\"line\">    border-radius:@px;</div><div class=\"line\">    -webkit-border-radius:@px;</div><div class=\"line\">    -moz-border-radius:@px;</div><div class=\"line\">    -o-border-radius:@px;</div><div class=\"line\">&#125;</div><div class=\"line\">.elem&#123;</div><div class=\"line\">    .setborderradius(5px);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>css输出<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.elem</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">border-raidus</span>:<span class=\"number\">5px</span>;</div><div class=\"line\">    <span class=\"attribute\">-webkit-border-radius</span>:<span class=\"number\">5px</span>;</div><div class=\"line\">    <span class=\"attribute\">-moz-border-radius</span>:<span class=\"number\">5px</span>;</div><div class=\"line\">    <span class=\"attribute\">-o-border-radius</span>:<span class=\"number\">5px</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n","excerpt":"","more":"<p>开始工作到现在写了几个静态页面，尝试使用Less来编写样式。原本是想使用less来减少样式代码量，可能是水平有限，写出来的less比css还要多，但less还是使我提高了效率。<br>毕竟自动编译出来的代码，不用再去格式化，来迎合代码规范。记录一下使用的心得。</p>\n<h2 id=\"1-定义常量\"><a href=\"#1-定义常量\" class=\"headerlink\" title=\"1 定义常量\"></a>1 定义常量</h2><p>less可以使用<code>@常量名</code>来存储页面上元素信息。<br>这就可以在切图时，将页面的页面宽度和背景颜色，等等信息先存储起来，不用在码代码时，再去psd中取色，量长度等等。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">@pagewidth:980px;</div><div class=\"line\">@bgcolor:#999999</div></pre></td></tr></table></figure>\n<p>还有一种方式就是使用class类来存储<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.title</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">font-size</span>:<span class=\"number\">16px</span>;</div><div class=\"line\">    <span class=\"attribute\">color</span>:<span class=\"number\">#666</span>;</div><div class=\"line\">    <span class=\"attribute\">font-family</span>:<span class=\"string\">\"Microsoft YaHei\"</span>;</div><div class=\"line\">    <span class=\"attribute\">font-weight</span>:normal;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>引用的时候<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">.element&#123;</div><div class=\"line\">    width:@pagewidth;</div><div class=\"line\">    background:@bgcolor;</div><div class=\"line\">    .title;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"2-css的混入\"><a href=\"#2-css的混入\" class=\"headerlink\" title=\"2 css的混入\"></a>2 css的混入</h2><p>在css中编写父元素和子元素需要写两个选择器写在两个{}中，其层级关系也没不明显。<br>在less中就可以混入css，就是在父元素的样式{}中，再使用选择器来选择子元素，如下代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">.father&#123;</div><div class=\"line\">    width:@pagewidth;</div><div class=\"line\">    height:200px;</div><div class=\"line\">    .child&#123;</div><div class=\"line\">        width:100px;</div><div class=\"line\">        height:200px;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>输出成css代码就是<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.father</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">width</span>:<span class=\"number\">980px</span>;</div><div class=\"line\">    <span class=\"attribute\">height</span>:<span class=\"number\">200px</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.father</span> <span class=\"selector-class\">.child</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">width</span>:<span class=\"number\">100px</span>;</div><div class=\"line\">    <span class=\"attribute\">height</span>:<span class=\"number\">200px</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>在css中可以<code>.father&gt;div</code>来获取子元素，在less中就可以使用&amp;符号来链接混入代码的选择器<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">.father&#123;</div><div class=\"line\">    width:@pagewidth;</div><div class=\"line\">    &amp;&gt;div&#123;</div><div class=\"line\">        height:200px;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>输出css<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.father</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">width</span>:<span class=\"number\">980px</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.father</span>&gt;<span class=\"selector-tag\">div</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">height</span>:<span class=\"number\">200px</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"3-运算\"><a href=\"#3-运算\" class=\"headerlink\" title=\"3 运算\"></a>3 运算</h2><p>在less中任何数字（包括颜色）是可以进行运算的，比如高度宽度等等。运算是支持+-x/等等的<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">@color:#111;</div><div class=\"line\">.elem&#123;</div><div class=\"line\">    width:100 + 30px;</div><div class=\"line\">    height:100 * 2 px;</div><div class=\"line\">    color:@color*2;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>css输出<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.elem</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">width</span>:<span class=\"number\">130px</span>;</div><div class=\"line\">    <span class=\"attribute\">height</span>:<span class=\"number\">200px</span>;</div><div class=\"line\">    <span class=\"attribute\">color</span>:<span class=\"number\">#222</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"4-函数\"><a href=\"#4-函数\" class=\"headerlink\" title=\"4 函数\"></a>4 函数</h2><p>在less中你可以定义一个函数，然后再调用它。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">.setborderradius(@px)&#123;</div><div class=\"line\">    border-radius:@px;</div><div class=\"line\">    -webkit-border-radius:@px;</div><div class=\"line\">    -moz-border-radius:@px;</div><div class=\"line\">    -o-border-radius:@px;</div><div class=\"line\">&#125;</div><div class=\"line\">.elem&#123;</div><div class=\"line\">    .setborderradius(5px);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>css输出<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.elem</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">border-raidus</span>:<span class=\"number\">5px</span>;</div><div class=\"line\">    <span class=\"attribute\">-webkit-border-radius</span>:<span class=\"number\">5px</span>;</div><div class=\"line\">    <span class=\"attribute\">-moz-border-radius</span>:<span class=\"number\">5px</span>;</div><div class=\"line\">    <span class=\"attribute\">-o-border-radius</span>:<span class=\"number\">5px</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cizfkde3500014cw57c54q9v6","tag_id":"cizfkde3d00034cw57pggqb6g","_id":"cizfkde3l00084cw5z6jug306"},{"post_id":"cizfkde3a00024cw5hsszizgr","tag_id":"cizfkde3j00074cw5si3e1ff2","_id":"cizfkde3s000d4cw5o6levssj"},{"post_id":"cizfkde3f00044cw5igz1hnn7","tag_id":"cizfkde3q000b4cw5rj8yodg4","_id":"cizfkde3w000h4cw587ignvky"},{"post_id":"cizfkde3h00054cw5xzf5lx3b","tag_id":"cizfkde3u000f4cw5o2v2xq54","_id":"cizfkde42000l4cw5qs582q5z"},{"post_id":"cizfkde3i00064cw5nod9v7d2","tag_id":"cizfkde40000j4cw5nmeqqqf6","_id":"cizfkde44000n4cw5l9pzlwaa"},{"post_id":"cizfkde3l00094cw5rjy8sazh","tag_id":"cizfkde43000m4cw5hyimj8dv","_id":"cizfkde45000p4cw5r2jfa1kg"},{"post_id":"cizfkde3p000a4cw5iem7xiqz","tag_id":"cizfkde45000o4cw5g69j1l1c","_id":"cizfkde46000r4cw5yz9i1i69"},{"post_id":"cizfkde3s000c4cw5uszrgslp","tag_id":"cizfkde45000q4cw5w0ri0qz8","_id":"cizfkde46000t4cw5laid3yjy"},{"post_id":"cizfkde3t000e4cw5j3dsyrr2","tag_id":"cizfkde46000s4cw5qbecpb94","_id":"cizfkde47000v4cw5iqeu337f"},{"post_id":"cizfkde3u000g4cw5ljmat9ql","tag_id":"cizfkde46000u4cw59k6ezbjv","_id":"cizfkde47000x4cw514wrfjqx"},{"post_id":"cizfkde3x000i4cw5gsbqk3ib","tag_id":"cizfkde47000w4cw5hqclv34l","_id":"cizfkde48000z4cw51zgykq7m"},{"post_id":"cizfkde41000k4cw5klu05eg7","tag_id":"cizfkde48000y4cw53chak6qs","_id":"cizfkde4800104cw5ku0n88t4"}],"Tag":[{"name":"angular1","_id":"cizfkde3d00034cw57pggqb6g"},{"name":"html,css","_id":"cizfkde3j00074cw5si3e1ff2"},{"name":"atom plug","_id":"cizfkde3q000b4cw5rj8yodg4"},{"name":"无限轮播图Demo","_id":"cizfkde3u000f4cw5o2v2xq54"},{"name":"前端自动化","_id":"cizfkde40000j4cw5nmeqqqf6"},{"name":"ionic,angular,googleAD","_id":"cizfkde43000m4cw5hyimj8dv"},{"name":"ionic,angular","_id":"cizfkde45000o4cw5g69j1l1c"},{"name":"javascript","_id":"cizfkde45000q4cw5w0ri0qz8"},{"name":"StaticStorage","_id":"cizfkde46000s4cw5qbecpb94"},{"name":"路由","_id":"cizfkde46000u4cw59k6ezbjv"},{"name":"yeoman,gulp,bower,landingpage","_id":"cizfkde47000w4cw5hqclv34l"},{"name":"less base","_id":"cizfkde48000y4cw53chak6qs"}]}}